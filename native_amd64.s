// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "textflag.h"

TEXT Â·__native_entry__(SB), NOSPLIT, $0
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff // leaq         $-7(%rip), %rax
	MOVQ AX, 8(SP)
	RET

LCPI0_0:
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10

LCPI0_1:
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032

LCPI0_2:
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024

LCPI0_3:
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63

LCPI0_4:
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'

LCPI0_5:
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'

LCPI0_6:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

_b64encode:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	MOVQ  8(SI), R9
	TESTQ R9, R9
	JE    LBB0_26
	MOVQ  0(DI), R8
	ADDQ  8(DI), R8
	MOVQ  0(SI), R12
	ADDQ  R12, R9
	TESTB $1, DX
	LONG  $0x260d8d48; WORD $0x000f; BYTE $0x00 // leaq         $3878(%rip), %rcx  /* _VecEncodeCharsetStd(%rip) */
	LONG  $0x7f158d4c; WORD $0x000f; BYTE $0x00 // leaq         $3967(%rip), %r10  /* _VecEncodeCharsetURL(%rip) */
	LONG  $0xd1440f4c                           // cmoveq       %rcx, %r10
	LONG  $0xd40d8d48; WORD $0x000e; BYTE $0x00 // leaq         $3796(%rip), %rcx  /* _TabEncodeCharsetStd(%rip) */
	LONG  $0x2d1d8d4c; WORD $0x000f; BYTE $0x00 // leaq         $3885(%rip), %r11  /* _TabEncodeCharsetURL(%rip) */
	LONG  $0xd9440f4c                           // cmoveq       %rcx, %r11
	TESTB $4, DX
	JE    LBB0_2
	LEAQ  -28(R9), SI
	CMPQ  R12, SI
	JA    LBB0_4
	LONG  $0x6f7ec1c4; BYTE $0x02               // vmovdqu      (%r10), %ymm0
	QUAD  $0xfffffeb10d6ffec5                   // vmovdqu      $-335(%rip), %ymm1  /* LCPI0_0(%rip) */
	QUAD  $0xfffffec9156ffec5                   // vmovdqu      $-311(%rip), %ymm2  /* LCPI0_1(%rip) */
	QUAD  $0xfffffee11d6ffec5                   // vmovdqu      $-287(%rip), %ymm3  /* LCPI0_2(%rip) */
	QUAD  $0xfffffef9256ffec5                   // vmovdqu      $-263(%rip), %ymm4  /* LCPI0_3(%rip) */
	QUAD  $0xffffff112d6ffec5                   // vmovdqu      $-239(%rip), %ymm5  /* LCPI0_4(%rip) */
	QUAD  $0xffffff29356ffec5                   // vmovdqu      $-215(%rip), %ymm6  /* LCPI0_5(%rip) */
	QUAD  $0xffffff413d6ffec5                   // vmovdqu      $-191(%rip), %ymm7  /* LCPI0_6(%rip) */
	MOVQ  R8, R14

LBB0_6:
	LONG $0x6f7a41c4; WORD $0x2404 // vmovdqu      (%r12), %xmm8
	QUAD $0x010c2444383d43c4       // vinserti128  $1, $12(%r12), %ymm8, %ymm8
	LONG $0x003d62c4; BYTE $0xc1   // vpshufb      %ymm1, %ymm8, %ymm8
	LONG $0xcadb3dc5               // vpand        %ymm2, %ymm8, %ymm9
	LONG $0xcbe435c5               // vpmulhuw     %ymm3, %ymm9, %ymm9
	LONG $0xc4db3dc5               // vpand        %ymm4, %ymm8, %ymm8
	LONG $0x712dc1c4; WORD $0x08f0 // vpsllw       $8, %ymm8, %ymm10
	LONG $0x713dc1c4; WORD $0x04f0 // vpsllw       $4, %ymm8, %ymm8
	LONG $0x0e3d43c4; WORD $0xaac2 // vpblendw     $170, %ymm10, %ymm8, %ymm8
	LONG $0xeb3d41c4; BYTE $0xc1   // vpor         %ymm9, %ymm8, %ymm8
	LONG $0x645541c4; BYTE $0xc8   // vpcmpgtb     %ymm8, %ymm5, %ymm9
	LONG $0xcfdb35c5               // vpand        %ymm7, %ymm9, %ymm9
	LONG $0xd6d83dc5               // vpsubusb     %ymm6, %ymm8, %ymm10
	LONG $0xeb3541c4; BYTE $0xca   // vpor         %ymm10, %ymm9, %ymm9
	LONG $0x007d42c4; BYTE $0xc9   // vpshufb      %ymm9, %ymm0, %ymm9
	LONG $0xfc3541c4; BYTE $0xc0   // vpaddb       %ymm8, %ymm9, %ymm8
	LONG $0x7f7e41c4; BYTE $0x06   // vmovdqu      %ymm8, (%r14)
	ADDQ $32, R14
	ADDQ $24, R12
	CMPQ R12, SI
	JBE  LBB0_6
	JMP  LBB0_7

LBB0_2:
	MOVQ R8, R14

LBB0_7:
	LEAQ -24(R9), SI
	CMPQ R12, SI
	JA   LBB0_10

LBB0_8:
	MOVL DX, SI
	ANDL $4, SI
	JE   LBB0_10
	LONG $0x6f7ac1c4; WORD $0x2404             // vmovdqu      (%r12), %xmm0
	LONG $0x6f7ac1c4; WORD $0x244c; BYTE $0x08 // vmovdqu      $8(%r12), %xmm1
	LONG $0xd973f1c5; BYTE $0x04               // vpsrldq      $4, %xmm1, %xmm1
	LONG $0x387de3c4; WORD $0x01c1             // vinserti128  $1, %xmm1, %ymm0, %ymm0
	QUAD $0xfffddc05007de2c4; BYTE $0xff       // vpshufb      $-548(%rip), %ymm0, %ymm0  /* LCPI0_0(%rip) */
	QUAD $0xfffffdf40ddbfdc5                   // vpand        $-524(%rip), %ymm0, %ymm1  /* LCPI0_1(%rip) */
	QUAD $0xfffffe0c0de4f5c5                   // vpmulhuw     $-500(%rip), %ymm1, %ymm1  /* LCPI0_2(%rip) */
	QUAD $0xfffffe2405dbfdc5                   // vpand        $-476(%rip), %ymm0, %ymm0  /* LCPI0_3(%rip) */
	LONG $0xf071edc5; BYTE $0x08               // vpsllw       $8, %ymm0, %ymm2
	LONG $0xf071fdc5; BYTE $0x04               // vpsllw       $4, %ymm0, %ymm0
	LONG $0x0e7de3c4; WORD $0xaac2             // vpblendw     $170, %ymm2, %ymm0, %ymm0
	LONG $0xc1ebfdc5                           // vpor         %ymm1, %ymm0, %ymm0
	QUAD $0xfffffe280d6ffec5                   // vmovdqu      $-472(%rip), %ymm1  /* LCPI0_4(%rip) */
	LONG $0xc864f5c5                           // vpcmpgtb     %ymm0, %ymm1, %ymm1
	LONG $0x6f7ec1c4; BYTE $0x12               // vmovdqu      (%r10), %ymm2
	QUAD $0xfffffe371dd8fdc5                   // vpsubusb     $-457(%rip), %ymm0, %ymm3  /* LCPI0_5(%rip) */
	QUAD $0xfffffe4f0ddbf5c5                   // vpand        $-433(%rip), %ymm1, %ymm1  /* LCPI0_6(%rip) */
	LONG $0xcbebf5c5                           // vpor         %ymm3, %ymm1, %ymm1
	LONG $0x006de2c4; BYTE $0xc9               // vpshufb      %ymm1, %ymm2, %ymm1
	LONG $0xc0fcf5c5                           // vpaddb       %ymm0, %ymm1, %ymm0
	LONG $0x7f7ec1c4; BYTE $0x06               // vmovdqu      %ymm0, (%r14)
	ADDQ $32, R14
	ADDQ $24, R12

LBB0_10:
	CMPQ R12, R9
	JE   LBB0_25
	LEAQ -4(R9), R10
	CMPQ R12, R10
	JA   LBB0_14

LBB0_12:
	MOVL    0(R12), SI
	BSWAPL  SI
	MOVQ    SI, R15
	SHRQ    $26, R15
	MOVL    SI, CX
	SHRL    $20, CX
	ANDL    $63, CX
	MOVL    SI, BX
	SHRL    $14, BX
	ANDL    $63, BX
	SHRL    $8, SI
	ANDL    $63, SI
	ADDQ    $3, R12
	MOVBLZX 0(R11)(R15*1), AX
	MOVB    AX, 0(R14)
	MOVBLZX 0(R11)(CX*1), AX
	MOVB    AX, 1(R14)
	MOVBLZX 0(R11)(BX*1), AX
	MOVB    AX, 2(R14)
	MOVBLZX 0(R11)(SI*1), AX
	MOVB    AX, 3(R14)
	ADDQ    $4, R14
	CMPQ    R12, R10
	JBE     LBB0_12

LBB0_14:
	SUBQ    R12, R9
	MOVBLZX 0(R12), R10
	CMPQ    R9, $1
	JE      LBB0_21
	MOVQ    R10, SI
	SHLQ    $16, SI
	CMPQ    R9, $2
	JE      LBB0_18
	CMPQ    R9, $3
	JNE     LBB0_25
	MOVBLZX 2(R12), DX
	ORL     DX, SI
	MOVBLZX 1(R12), AX
	SHLL    $8, AX
	ORL     SI, AX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), CX
	MOVB    CX, 0(R14)
	MOVL    AX, CX
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	SHRL    $6, AX
	ANDL    $63, AX
	MOVB    0(R11)(AX*1), AX
	MOVB    AX, 2(R14)
	ANDL    $63, DX
	MOVB    0(R11)(DX*1), AX
	MOVB    AX, 3(R14)
	JMP     LBB0_24

LBB0_4:
	MOVQ R8, R14
	LEAQ -24(R9), SI
	CMPQ R12, SI
	JBE  LBB0_8
	JMP  LBB0_10

LBB0_18:
	MOVBLZX 1(R12), AX
	MOVL    AX, CX
	SHLL    $8, CX
	ORL     SI, CX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), BX
	MOVB    BX, 0(R14)
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	ANDL    $15, AX
	MOVB    0(R11)(AX*4), AX
	MOVB    AX, 2(R14)
	TESTB   $2, DX
	JNE     LBB0_19
	MOVB    $61, 3(R14)
	JMP     LBB0_24

LBB0_21:
	MOVQ  R10, AX
	SHRQ  $2, AX
	MOVB  0(R11)(AX*1), AX
	MOVB  AX, 0(R14)
	SHLL  $4, R10
	ANDL  $48, R10
	MOVB  0(R11)(R10*1), AX
	MOVB  AX, 1(R14)
	TESTB $2, DX
	JNE   LBB0_22
	MOVW  $15677, 2(R14)

LBB0_24:
	ADDQ $4, R14
	JMP  LBB0_25

LBB0_19:
	ADDQ $3, R14
	JMP  LBB0_25

LBB0_22:
	ADDQ $2, R14

LBB0_25:
	SUBQ R8, R14
	ADDQ R14, 8(DI)

LBB0_26:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LCPI1_0:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_1:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_2:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84

LCPI1_3:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112

LCPI1_4:
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'

LCPI1_5:
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'

LCPI1_6:
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'

LCPI1_7:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI1_8:
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'

LCPI1_9:
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_10:
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'

LCPI1_11:
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1

LCPI1_12:
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1

LCPI1_14:
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'

LCPI1_13:
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6

_b64decode:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5541                               // pushq        %r13
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	SUBQ  $88, SP
	TESTQ DX, DX
	JE    LBB1_1
	MOVQ  0(DI), AX
	MOVQ  8(DI), BX
	ADDQ  AX, BX
	MOVQ  DI, -104(BP)
	ADDQ  16(DI), AX
	MOVQ  AX, -88(BP)
	LEAQ  0(SI)(DX*1), R12
	TESTB $1, CX
	LONG  $0xa6058d48; WORD $0x000a; BYTE $0x00 // leaq         $2726(%rip), %rax  /* _VecDecodeCharsetStd(%rip) */
	LONG  $0x9f1d8d4c; WORD $0x000b; BYTE $0x00 // leaq         $2975(%rip), %r11  /* _VecDecodeCharsetURL(%rip) */
	LONG  $0xd8440f4c                           // cmoveq       %rax, %r11
	MOVQ  BX, -80(BP)
	MOVQ  SI, -56(BP)
	MOVQ  SI, R14
	MOVL  CX, -44(BP)
	TESTB $4, CX
	JE    LBB1_27
	MOVQ  -56(BP), AX
	LEAQ  0(AX)(DX*1), R9
	ADDQ  $-32, R9
	MOVQ  -80(BP), BX
	MOVQ  AX, R14
	CMPQ  R9, AX
	JB    LBB1_27
	TESTB $1, -44(BP)
	JE    LBB1_5
	QUAD  $0xfffffdc6056ffec5                   // vmovdqu      $-570(%rip), %ymm0  /* LCPI1_1(%rip) */
	MOVQ  -56(BP), CX
	JNE   LBB1_9

LBB1_8:
	QUAD $0xfffffdd80d6ffec5 // vmovdqu      $-552(%rip), %ymm1  /* LCPI1_2(%rip) */
	JNE  LBB1_12

LBB1_11:
	QUAD $0xfffffe0e156ffec5 // vmovdqu      $-498(%rip), %ymm2  /* LCPI1_4(%rip) */
	JNE  LBB1_15

LBB1_14:
	QUAD $0xfffffe441d6ffec5 // vmovdqu      $-444(%rip), %ymm3  /* LCPI1_6(%rip) */
	JMP  LBB1_16

LBB1_1:
	XORL AX, AX
	JMP  LBB1_219

LBB1_5:
	QUAD $0xfffffd73056ffec5 // vmovdqu      $-653(%rip), %ymm0  /* LCPI1_0(%rip) */
	MOVQ -56(BP), CX
	JE   LBB1_8

LBB1_9:
	QUAD $0xfffffdc50d6ffec5 // vmovdqu      $-571(%rip), %ymm1  /* LCPI1_3(%rip) */
	JE   LBB1_11

LBB1_12:
	QUAD $0xfffffdfb156ffec5 // vmovdqu      $-517(%rip), %ymm2  /* LCPI1_5(%rip) */
	JE   LBB1_14

LBB1_15:
	QUAD $0xfffffe311d6ffec5 // vmovdqu      $-463(%rip), %ymm3  /* LCPI1_7(%rip) */

LBB1_16:
	MOVQ -88(BP), AX
	LEAQ -32(AX), R8
	LEAQ -1(R12), R15
	LEAQ 1(R12), R10
	QUAD $0xfffffe37256ffec5 // vmovdqu      $-457(%rip), %ymm4  /* LCPI1_8(%rip) */
	QUAD $0xfffffe4f2d6ffec5 // vmovdqu      $-433(%rip), %ymm5  /* LCPI1_9(%rip) */
	LONG $0xf6efc9c5         // vpxor        %xmm6, %xmm6, %xmm6
	QUAD $0xfffffe83056f7ec5 // vmovdqu      $-381(%rip), %ymm8  /* LCPI1_11(%rip) */
	QUAD $0xfffffe9b0d6f7ec5 // vmovdqu      $-357(%rip), %ymm9  /* LCPI1_12(%rip) */
	QUAD $0xfffffed3156f7ac5 // vmovdqu      $-301(%rip), %xmm10  /* LCPI1_13(%rip) */
	QUAD $0xfffffeab1d6f7ec5 // vmovdqu      $-341(%rip), %ymm11  /* LCPI1_14(%rip) */
	MOVQ $-4294967296, R13
	MOVQ -80(BP), BX
	JMP  LBB1_17

LBB1_70:
	LONG $0x237f7ac5               // vmovdqu      %xmm12, (%rbx)
	LONG $0x397d63c4; WORD $0x01e7 // vextracti128 $1, %ymm12, %xmm7
	LONG $0x7bd6f9c5; BYTE $0x10   // vmovq        %xmm7, $16(%rbx)

LBB1_71:
	ADDQ $32, CX
	ADDQ $24, BX

LBB1_72:
	MOVQ CX, R14
	MOVQ R14, CX
	CMPQ R14, R9
	JA   LBB1_27

LBB1_17:
	LONG $0x216f7ec5               // vmovdqu      (%rcx), %ymm12
	LONG $0x7215c1c4; WORD $0x04d4 // vpsrld       $4, %ymm12, %ymm13
	LONG $0xecdb15c5               // vpand        %ymm4, %ymm13, %ymm13
	LONG $0xf4db1dc5               // vpand        %ymm4, %ymm12, %ymm14
	LONG $0x007542c4; BYTE $0xf6   // vpshufb      %ymm14, %ymm1, %ymm14
	LONG $0x005542c4; BYTE $0xfd   // vpshufb      %ymm13, %ymm5, %ymm15
	LONG $0xdb0541c4; BYTE $0xf6   // vpand        %ymm14, %ymm15, %ymm14
	LONG $0xf6740dc5               // vpcmpeqb     %ymm6, %ymm14, %ymm14
	LONG $0xd77dc1c4; BYTE $0xc6   // vpmovmskb    %ymm14, %eax
	ORQ  R13, AX
	BSFQ AX, AX
	CMPL AX, $31
	JA   LBB1_68
	CMPQ CX, R12
	JAE  LBB1_48
	LONG $0xe67e79c5               // vmovd        %xmm12, %esi
	LEAQ 1(CX), R14
	XORL DI, DI
	XORL DX, DX
	CMPB SI, $10
	JE   LBB1_24

LBB1_21:
	CMPB    SI, $13
	JE      LBB1_24
	MOVBLZX SI, SI
	MOVBLZX 0(R11)(SI*1), SI
	CMPL    SI, $255
	JE      LBB1_40
	ADDL    $1, DI
	SHLL    $6, DX
	ORL     SI, DX

LBB1_24:
	CMPQ    R14, R12
	JAE     LBB1_41
	CMPL    DI, $3
	JG      LBB1_41
	MOVBLZX 0(R14), SI
	ADDQ    $1, R14
	CMPB    SI, $10
	JNE     LBB1_21
	JMP     LBB1_24

LBB1_68:
	LONG $0x007d42c4; BYTE $0xed   // vpshufb      %ymm13, %ymm0, %ymm13
	LONG $0xf2741dc5               // vpcmpeqb     %ymm2, %ymm12, %ymm14
	LONG $0x4c1563c4; WORD $0xe0eb // vpblendvb    %ymm14, %ymm3, %ymm13, %ymm13
	LONG $0xfc1541c4; BYTE $0xe4   // vpaddb       %ymm12, %ymm13, %ymm12
	QUAD $0xfffffd6325db1dc5       // vpand        $-669(%rip), %ymm12, %ymm12  /* LCPI1_10(%rip) */
	LONG $0x041d42c4; BYTE $0xe0   // vpmaddubsw   %ymm8, %ymm12, %ymm12
	LONG $0xf51d41c4; BYTE $0xe1   // vpmaddwd     %ymm9, %ymm12, %ymm12
	LONG $0x397d63c4; WORD $0x01e7 // vextracti128 $1, %ymm12, %xmm7
	LONG $0x0041c2c4; BYTE $0xfa   // vpshufb      %xmm10, %xmm7, %xmm7
	LONG $0x001d42c4; BYTE $0xe3   // vpshufb      %ymm11, %ymm12, %ymm12
	LONG $0x021de3c4; WORD $0x08ff // vpblendd     $8, %ymm7, %ymm12, %ymm7
	LONG $0x024563c4; WORD $0xc0e6 // vpblendd     $192, %ymm6, %ymm7, %ymm12
	CMPQ BX, R8
	JA   LBB1_70
	LONG $0x237f7ec5               // vmovdqu      %ymm12, (%rbx)
	JMP  LBB1_71

LBB1_48:
	XORL DI, DI
	MOVL $0, DX
	MOVQ CX, R14
	CMPQ CX, R12
	JE   LBB1_49

LBB1_51:
	CMPQ R14, R15
	JAE  LBB1_42
	CMPB 0(R14), $61
	JNE  LBB1_53
	LEAQ 2(R14), SI
	CMPB 1(R14), $61
	JNE  LBB1_47

LBB1_58:
	CMPQ  SI, R12
	JAE   LBB1_60
	SUBQ  CX, SI
	ADDQ  $1, SI
	MOVQ  SI, R14
	TESTQ R14, R14
	JE    LBB1_72
	JMP   LBB1_56

LBB1_40:
	ADDQ $-1, R14

LBB1_41:
	CMPL DI, $1
	JNE  LBB1_43

LBB1_42:
	SUBQ  CX, R14
	ADDQ  $1, R14
	TESTQ R14, R14
	JE    LBB1_72
	JMP   LBB1_56

LBB1_43:
	CMPL DI, $3
	JG   LBB1_61
	CMPQ R14, R12
	JE   LBB1_49
	CMPL DI, $3
	JNE  LBB1_51
	LEAQ 1(R14), SI
	MOVL $3, DI
	CMPB 0(R14), $61
	JE   LBB1_58

LBB1_47:
	SUBQ  CX, SI
	MOVQ  SI, R14
	TESTQ R14, R14
	JE    LBB1_72
	JMP   LBB1_56

LBB1_49:
	MOVQ  R12, SI
	TESTB $2, -44(BP)
	JNE   LBB1_60
	MOVQ  R10, R14
	SUBQ  CX, R14
	TESTQ R14, R14
	JE    LBB1_72
	JMP   LBB1_56

LBB1_60:
	MOVB    $4, AX
	SUBB    DI, AX
	MOVBLZX AX, AX
	ADDL    AX, AX
	LEAL    0(AX)(AX*2), CX
	SHLL    CX, DX
	MOVQ    SI, R14

LBB1_61:
	CMPL DI, $2
	JE   LBB1_66
	CMPL DI, $3
	JE   LBB1_65
	CMPL DI, $4
	JNE  LBB1_67
	MOVB DX, 2(BX)

LBB1_65:
	MOVB DH, 1(BX)

LBB1_66:
	SHRL $16, DX
	MOVB DX, 0(BX)

LBB1_67:
	MOVLQSX DI, CX
	ADDQ    CX, BX
	ADDQ    $-1, BX
	MOVQ    R14, CX
	CMPQ    R14, R9
	JBE     LBB1_17
	JMP     LBB1_27

LBB1_53:
	ADDQ  $1, R14
	SUBQ  CX, R14
	TESTQ R14, R14
	JE    LBB1_72

LBB1_56:
	MOVQ -56(BP), AX
	SUBQ CX, AX
	SUBQ R14, AX
	JMP  LBB1_219

LBB1_27:
	MOVQ -88(BP), AX
	ADDQ $-8, AX
	MOVQ AX, -128(BP)
	CMPQ BX, AX
	JA   LBB1_74
	LEAQ -8(R12), AX
	MOVQ AX, -120(BP)
	CMPQ R14, AX
	JA   LBB1_74
	LEAQ -1(R12), AX
	MOVQ AX, -112(BP)
	LEAQ 1(R12), AX
	MOVQ AX, -96(BP)
	MOVQ R11, -72(BP)

LBB1_30:
	MOVQ    BX, -64(BP)
	MOVBLZX 0(R14), R13
	MOVBLZX 0(R11)(R13*1), DI
	MOVBLZX 1(R14), CX
	MOVBLZX 0(R11)(CX*1), DX
	MOVBLZX 2(R14), CX
	MOVBLZX 0(R11)(CX*1), SI
	MOVBLZX 3(R14), CX
	MOVBLZX 0(R11)(CX*1), CX
	MOVBLZX 4(R14), BX
	MOVBLZX 0(R11)(BX*1), R15
	MOVBLZX 5(R14), BX
	MOVBLZX 0(R11)(BX*1), R8
	MOVBLZX 6(R14), BX
	MOVBLZX 0(R11)(BX*1), BX
	MOVL    DX, AX
	ORL     DI, AX
	MOVL    CX, R9
	ORL     SI, R9
	ORL     AX, R9
	MOVL    R8, AX
	ORL     R15, AX
	MOVL    BX, R10
	ORL     AX, R10
	MOVBLZX 7(R14), AX
	MOVBLZX 0(R11)(AX*1), R11
	ORL     R9, R10
	MOVL    R11, AX
	ORL     R10, AX
	CMPB    AX, $-1
	JE      LBB1_31
	SHLQ    $58, DI
	SHLQ    $52, DX
	ORQ     DI, DX
	SHLQ    $46, SI
	SHLQ    $40, CX
	ORQ     SI, CX
	ORQ     DX, CX
	SHLQ    $34, R15
	SHLQ    $28, R8
	ORQ     R15, R8
	SHLQ    $22, BX
	ORQ     R8, BX
	ORQ     CX, BX
	SHLQ    $16, R11
	ORQ     BX, R11
	BSWAPQ  R11
	MOVQ    -64(BP), BX
	MOVQ    R11, 0(BX)
	ADDQ    $8, R14
	ADDQ    $6, BX
	MOVQ    -72(BP), R11
	JMP     LBB1_119

LBB1_31:
	CMPQ R14, R12
	JAE  LBB1_98
	LEAQ 1(R14), CX
	XORL DI, DI
	XORL DX, DX
	MOVQ -72(BP), R11
	CMPB R13, $10
	JE   LBB1_37

LBB1_34:
	CMPB    R13, $13
	JE      LBB1_37
	MOVBLZX R13, AX
	MOVBLZX 0(R11)(AX*1), SI
	CMPL    SI, $255
	JE      LBB1_89
	ADDL    $1, DI
	SHLL    $6, DX
	ORL     SI, DX

LBB1_37:
	CMPQ    CX, R12
	JAE     LBB1_90
	CMPL    DI, $3
	JG      LBB1_90
	MOVBLZX 0(CX), R13
	ADDQ    $1, CX
	CMPB    R13, $10
	JNE     LBB1_34
	JMP     LBB1_37

LBB1_98:
	XORL DI, DI
	MOVL $0, DX
	MOVQ R14, CX
	CMPQ R14, R12
	JE   LBB1_99

LBB1_101:
	CMPQ CX, -112(BP)
	JAE  LBB1_102
	CMPB 0(CX), $61
	MOVQ -72(BP), R11
	JNE  LBB1_106
	LEAQ 2(CX), SI
	CMPB 1(CX), $61
	JNE  LBB1_97

LBB1_108:
	CMPQ  SI, R12
	JAE   LBB1_110
	SUBQ  R14, SI
	ADDQ  $1, SI
	MOVQ  SI, CX
	TESTQ CX, CX
	JE    LBB1_104
	JMP   LBB1_217

LBB1_102:
	SUBQ  R14, CX
	ADDQ  $1, CX
	MOVQ  -72(BP), R11
	TESTQ CX, CX
	JE    LBB1_104
	JMP   LBB1_217

LBB1_89:
	ADDQ $-1, CX

LBB1_90:
	CMPL  DI, $1
	JNE   LBB1_92
	SUBQ  R14, CX
	ADDQ  $1, CX
	TESTQ CX, CX
	JE    LBB1_104
	JMP   LBB1_217

LBB1_92:
	CMPL DI, $3
	JG   LBB1_93
	CMPQ CX, R12
	JE   LBB1_99
	CMPL DI, $3
	JNE  LBB1_101
	LEAQ 1(CX), SI
	MOVL $3, DI
	CMPB 0(CX), $61
	JE   LBB1_108

LBB1_97:
	SUBQ  R14, SI
	MOVQ  SI, CX
	TESTQ CX, CX
	JE    LBB1_104
	JMP   LBB1_217

LBB1_99:
	MOVQ  R12, SI
	TESTB $2, -44(BP)
	MOVQ  -72(BP), R11
	JNE   LBB1_110
	MOVQ  -96(BP), CX
	SUBQ  R14, CX
	TESTQ CX, CX
	JE    LBB1_104
	JMP   LBB1_217

LBB1_110:
	MOVB    $4, AX
	SUBB    DI, AX
	MOVBLZX AX, AX
	ADDL    AX, AX
	LEAL    0(AX)(AX*2), CX
	SHLL    CX, DX
	MOVQ    SI, R14
	CMPL    DI, $2
	MOVQ    -64(BP), BX
	JNE     LBB1_112
	JMP     LBB1_116

LBB1_93:
	MOVQ CX, R14
	CMPL DI, $2
	MOVQ -64(BP), BX
	JE   LBB1_116

LBB1_112:
	CMPL DI, $3
	JE   LBB1_115
	CMPL DI, $4
	JNE  LBB1_117
	MOVB DX, 2(BX)

LBB1_115:
	MOVB DH, 1(BX)

LBB1_116:
	SHRL $16, DX
	MOVB DX, 0(BX)

LBB1_117:
	MOVLQSX DI, AX
	ADDQ    AX, BX
	ADDQ    $-1, BX
	JMP     LBB1_119

LBB1_106:
	ADDQ  $1, CX
	SUBQ  R14, CX
	TESTQ CX, CX
	JNE   LBB1_217

LBB1_104:
	MOVQ -64(BP), BX

LBB1_119:
	CMPQ BX, -128(BP)
	JA   LBB1_74
	CMPQ R14, -120(BP)
	JBE  LBB1_30

LBB1_74:
	MOVQ -88(BP), AX
	ADDQ $-4, AX
	CMPQ BX, AX
	JA   LBB1_76
	LEAQ -4(R12), R9
	CMPQ R14, R9
	JA   LBB1_76
	MOVQ AX, R8
	LEAQ -1(R12), R15
	ANDL $2, -44(BP)
	LEAQ 1(R12), AX
	MOVQ AX, -64(BP)

LBB1_143:
	MOVQ    BX, R13
	MOVBLZX 0(R14), SI
	MOVBLZX 0(R11)(SI*1), R10
	MOVBLZX 1(R14), CX
	MOVBLZX 0(R11)(CX*1), AX
	MOVBLZX 2(R14), DX
	MOVBLZX 0(R11)(DX*1), DI
	MOVBLZX 3(R14), DX
	MOVBLZX 0(R11)(DX*1), DX
	MOVL    AX, CX
	ORL     R10, CX
	MOVL    DI, BX
	ORL     DX, BX
	ORL     CX, BX
	CMPB    BX, $-1
	JE      LBB1_144
	SHLL    $26, R10
	SHLL    $20, AX
	ORL     R10, AX
	SHLL    $14, DI
	SHLL    $8, DX
	ORL     DI, DX
	ORL     AX, DX
	BSWAPL  DX
	MOVQ    R13, BX
	MOVL    DX, 0(R13)
	ADDQ    $4, R14
	ADDQ    $3, BX
	JMP     LBB1_183

LBB1_144:
	CMPQ R14, R12
	JAE  LBB1_162
	LEAQ 1(R14), CX
	XORL DI, DI
	XORL DX, DX
	CMPB SI, $10
	JE   LBB1_150

LBB1_147:
	CMPB    SI, $13
	JE      LBB1_150
	MOVBLZX SI, AX
	MOVBLZX 0(R11)(AX*1), SI
	CMPL    SI, $255
	JE      LBB1_153
	ADDL    $1, DI
	SHLL    $6, DX
	ORL     SI, DX

LBB1_150:
	CMPQ    CX, R12
	JAE     LBB1_154
	CMPL    DI, $3
	JG      LBB1_154
	MOVBLZX 0(CX), SI
	ADDQ    $1, CX
	CMPB    SI, $10
	JNE     LBB1_147
	JMP     LBB1_150

LBB1_162:
	XORL DI, DI
	MOVL $0, DX
	MOVQ R14, CX
	CMPQ R14, R12
	JE   LBB1_163

LBB1_165:
	CMPQ CX, R15
	JAE  LBB1_155
	CMPB 0(CX), $61
	JNE  LBB1_167
	LEAQ 2(CX), SI
	CMPB 1(CX), $61
	JNE  LBB1_161

LBB1_172:
	CMPQ SI, R12
	JAE  LBB1_174
	SUBQ R14, SI
	ADDQ $1, SI
	MOVQ SI, CX
	JMP  LBB1_169

LBB1_153:
	ADDQ $-1, CX

LBB1_154:
	CMPL DI, $1
	JNE  LBB1_156

LBB1_155:
	SUBQ R14, CX
	ADDQ $1, CX
	JMP  LBB1_169

LBB1_156:
	CMPL DI, $3
	JG   LBB1_157
	CMPQ CX, R12
	JE   LBB1_163
	CMPL DI, $3
	JNE  LBB1_165
	LEAQ 1(CX), SI
	MOVL $3, DI
	CMPB 0(CX), $61
	JE   LBB1_172

LBB1_161:
	SUBQ R14, SI
	MOVQ SI, CX
	JMP  LBB1_169

LBB1_163:
	MOVQ R12, SI
	CMPL -44(BP), $0
	JNE  LBB1_174
	MOVQ -64(BP), CX
	JMP  LBB1_168

LBB1_174:
	MOVB    $4, AX
	SUBB    DI, AX
	MOVBLZX AX, AX
	ADDL    AX, AX
	LEAL    0(AX)(AX*2), CX
	SHLL    CX, DX
	MOVQ    SI, R14
	MOVQ    R13, BX
	CMPL    DI, $2
	JNE     LBB1_176
	JMP     LBB1_180

LBB1_157:
	MOVQ CX, R14
	MOVQ R13, BX
	CMPL DI, $2
	JE   LBB1_180

LBB1_176:
	CMPL DI, $3
	JE   LBB1_179
	CMPL DI, $4
	JNE  LBB1_181
	MOVB DX, 2(BX)

LBB1_179:
	MOVB DH, 1(BX)

LBB1_180:
	SHRL $16, DX
	MOVB DX, 0(BX)

LBB1_181:
	MOVLQSX DI, AX
	ADDQ    AX, BX
	ADDQ    $-1, BX
	JMP     LBB1_183

LBB1_167:
	ADDQ $1, CX

LBB1_168:
	SUBQ R14, CX

LBB1_169:
	TESTQ CX, CX
	JNE   LBB1_217
	MOVQ  R13, BX

LBB1_183:
	CMPQ BX, R8
	JA   LBB1_184
	CMPQ R14, R9
	JBE  LBB1_143

LBB1_184:
	MOVL  -44(BP), AX
	MOVQ  -64(BP), R8
	LEAQ  -1(R12), R9
	TESTL AX, AX
	JNE   LBB1_186
	JMP   LBB1_78

LBB1_76:
	MOVL  -44(BP), AX
	ANDL  $2, AX
	LEAQ  1(R12), R8
	LEAQ  -1(R12), R9
	TESTL AX, AX
	JNE   LBB1_186
	JMP   LBB1_78

LBB1_195:
	SUBQ R14, CX
	ADDQ $1, CX

LBB1_216:
	TESTQ CX, CX
	JNE   LBB1_217

LBB1_186:
	CMPQ R14, R12
	JAE  LBB1_218
	XORL DI, DI
	MOVQ R14, CX
	XORL DX, DX

LBB1_188:
	MOVBLZX 0(CX), SI
	CMPQ    SI, $10
	JE      LBB1_192
	CMPB    SI, $13
	JE      LBB1_192
	MOVBLZX 0(R11)(SI*1), SI
	CMPL    SI, $255
	JE      LBB1_194
	ADDL    $1, DI
	SHLL    $6, DX
	ORL     SI, DX

LBB1_192:
	ADDQ $1, CX
	CMPQ CX, R12
	JAE  LBB1_194
	CMPL DI, $4
	JL   LBB1_188

LBB1_194:
	CMPL DI, $1
	JE   LBB1_195
	CMPL DI, $3
	JG   LBB1_197
	MOVQ R12, SI
	CMPQ CX, R12
	JE   LBB1_208
	CMPL DI, $3
	JNE  LBB1_202
	LEAQ 1(CX), SI
	CMPB 0(CX), $61
	JNE  LBB1_201

LBB1_206:
	CMPQ SI, R12
	JAE  LBB1_208
	SUBQ R14, SI
	ADDQ $1, SI
	MOVQ SI, CX
	JMP  LBB1_216

LBB1_197:
	MOVQ CX, R14
	CMPL DI, $2
	JNE  LBB1_210
	JMP  LBB1_214

LBB1_208:
	MOVB    $4, AX
	SUBB    DI, AX
	MOVBLZX AX, AX
	ADDL    AX, AX
	LEAL    0(AX)(AX*2), CX
	SHLL    CX, DX
	MOVQ    SI, R14
	CMPL    DI, $2
	JE      LBB1_214

LBB1_210:
	CMPL DI, $3
	JE   LBB1_213
	CMPL DI, $4
	JNE  LBB1_215
	MOVB DX, 2(BX)

LBB1_213:
	MOVB DH, 1(BX)

LBB1_214:
	SHRL $16, DX
	MOVB DX, 0(BX)

LBB1_215:
	MOVLQSX DI, AX
	ADDQ    AX, BX
	ADDQ    $-1, BX
	XORL    CX, CX
	JMP     LBB1_216

LBB1_202:
	CMPQ CX, R9
	JAE  LBB1_195
	CMPB 0(CX), $61
	JNE  LBB1_204
	LEAQ 2(CX), SI
	CMPB 1(CX), $61
	JE   LBB1_206

LBB1_201:
	SUBQ R14, SI
	MOVQ SI, CX
	JMP  LBB1_216

LBB1_204:
	ADDQ $1, CX
	SUBQ R14, CX
	JMP  LBB1_216

LBB1_140:
	SUBQ R14, CX
	ADDQ $1, CX

LBB1_141:
	TESTQ CX, CX
	JNE   LBB1_217

LBB1_78:
	CMPQ R14, R12
	JAE  LBB1_218
	XORL DI, DI
	MOVQ R14, CX
	XORL DX, DX

LBB1_80:
	MOVBLZX 0(CX), SI
	CMPQ    SI, $10
	JE      LBB1_84
	CMPB    SI, $13
	JE      LBB1_84
	MOVBLZX 0(R11)(SI*1), SI
	CMPL    SI, $255
	JE      LBB1_86
	ADDL    $1, DI
	SHLL    $6, DX
	ORL     SI, DX

LBB1_84:
	ADDQ $1, CX
	CMPQ CX, R12
	JAE  LBB1_86
	CMPL DI, $4
	JL   LBB1_80

LBB1_86:
	CMPL DI, $1
	JE   LBB1_140
	CMPL DI, $3
	JG   LBB1_88
	CMPQ CX, R12
	JE   LBB1_139
	CMPL DI, $3
	JNE  LBB1_123
	LEAQ 1(CX), SI
	CMPB 0(CX), $61
	JNE  LBB1_127

LBB1_129:
	CMPQ SI, R12
	JAE  LBB1_131
	SUBQ R14, SI
	ADDQ $1, SI
	MOVQ SI, CX
	JMP  LBB1_141

LBB1_88:
	MOVQ CX, R14
	CMPL DI, $2
	JE   LBB1_137

LBB1_133:
	CMPL DI, $3
	JE   LBB1_136
	CMPL DI, $4
	JNE  LBB1_138
	MOVB DX, 2(BX)

LBB1_136:
	MOVB DH, 1(BX)

LBB1_137:
	SHRL $16, DX
	MOVB DX, 0(BX)

LBB1_138:
	MOVLQSX DI, CX
	ADDQ    CX, BX
	ADDQ    $-1, BX
	XORL    CX, CX
	JMP     LBB1_141

LBB1_139:
	MOVQ R8, CX
	SUBQ R14, CX
	JMP  LBB1_141

LBB1_123:
	CMPQ CX, R9
	JAE  LBB1_140
	CMPB 0(CX), $61
	JNE  LBB1_125
	LEAQ 2(CX), SI
	CMPB 1(CX), $61
	JE   LBB1_129

LBB1_127:
	SUBQ R14, SI
	MOVQ SI, CX
	JMP  LBB1_141

LBB1_131:
	MOVB    $4, CX
	SUBB    DI, CX
	MOVBLZX CX, CX
	ADDL    CX, CX
	LEAL    0(CX)(CX*2), CX
	SHLL    CX, DX
	MOVQ    SI, R14
	CMPL    DI, $2
	JNE     LBB1_133
	JMP     LBB1_137

LBB1_125:
	ADDQ $1, CX
	SUBQ R14, CX
	JMP  LBB1_141

LBB1_217:
	MOVQ -56(BP), AX
	SUBQ R14, AX
	SUBQ CX, AX
	JMP  LBB1_219

LBB1_218:
	MOVQ BX, CX
	SUBQ -80(BP), CX
	MOVQ -104(BP), AX
	ADDQ CX, 8(AX)
	MOVQ CX, AX

LBB1_219:
	ADDQ $88, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

_TabEncodeCharsetStd:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x2f2b393837363534 // .ascii 16, 'wxyz0123456789+/'

_VecEncodeCharsetStd:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'

_TabEncodeCharsetURL:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x5f2d393837363534 // .ascii 16, 'wxyz0123456789-_'

_VecEncodeCharsetURL:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'

_VecDecodeCharsetStd:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0x3fffffff3effffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff\xff?'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0xffffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff\xff'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

_VecDecodeCharsetURL:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffff3effffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0x3fffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff?'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

TEXT Â·__b64decode(SB), NOSPLIT, $0 - 40
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ mode+24(FP), CX
	CALL Â·__native_entry__+1502(SB) // _b64decode
	MOVQ AX, ret+32(FP)
	RET

TEXT Â·__b64encode(SB), NOSPLIT, $0 - 24
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ mode+16(FP), DX
	LEAQ Â·__native_entry__+237(SB), AX // _b64encode
	JMP  AX
