// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "textflag.h"

TEXT Â·__native_entry__(SB), NOSPLIT, $0
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff // leaq         $-7(%rip), %rax
	MOVQ AX, 8(SP)
	RET

LCPI0_0:
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10

LCPI0_1:
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032

LCPI0_2:
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024

LCPI0_3:
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63

LCPI0_4:
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'

LCPI0_5:
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'

LCPI0_6:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

_b64encode:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	MOVQ  8(SI), R9
	TESTQ R9, R9
	JE    LBB0_26
	MOVQ  0(DI), R8
	ADDQ  8(DI), R8
	MOVQ  0(SI), R12
	ADDQ  R12, R9
	TESTB $1, DX
	LONG  $0x330d8d48; WORD $0x000b; BYTE $0x00 // leaq         $2867(%rip), %rcx  /* _VecEncodeCharsetStd(%rip) */
	LONG  $0x8c158d4c; WORD $0x000b; BYTE $0x00 // leaq         $2956(%rip), %r10  /* _VecEncodeCharsetURL(%rip) */
	LONG  $0xd1440f4c                           // cmoveq       %rcx, %r10
	LONG  $0xe10d8d48; WORD $0x000a; BYTE $0x00 // leaq         $2785(%rip), %rcx  /* _TabEncodeCharsetStd(%rip) */
	LONG  $0x3a1d8d4c; WORD $0x000b; BYTE $0x00 // leaq         $2874(%rip), %r11  /* _TabEncodeCharsetURL(%rip) */
	LONG  $0xd9440f4c                           // cmoveq       %rcx, %r11
	TESTB $4, DX
	JE    LBB0_2
	LEAQ  -28(R9), SI
	CMPQ  R12, SI
	JA    LBB0_4
	LONG  $0x6f7ec1c4; BYTE $0x02               // vmovdqu      (%r10), %ymm0
	QUAD  $0xfffffeb10d6ffec5                   // vmovdqu      $-335(%rip), %ymm1  /* LCPI0_0(%rip) */
	QUAD  $0xfffffec9156ffec5                   // vmovdqu      $-311(%rip), %ymm2  /* LCPI0_1(%rip) */
	QUAD  $0xfffffee11d6ffec5                   // vmovdqu      $-287(%rip), %ymm3  /* LCPI0_2(%rip) */
	QUAD  $0xfffffef9256ffec5                   // vmovdqu      $-263(%rip), %ymm4  /* LCPI0_3(%rip) */
	QUAD  $0xffffff112d6ffec5                   // vmovdqu      $-239(%rip), %ymm5  /* LCPI0_4(%rip) */
	QUAD  $0xffffff29356ffec5                   // vmovdqu      $-215(%rip), %ymm6  /* LCPI0_5(%rip) */
	QUAD  $0xffffff413d6ffec5                   // vmovdqu      $-191(%rip), %ymm7  /* LCPI0_6(%rip) */
	MOVQ  R8, R14

LBB0_6:
	LONG $0x6f7a41c4; WORD $0x2404 // vmovdqu      (%r12), %xmm8
	QUAD $0x010c2444383d43c4       // vinserti128  $1, $12(%r12), %ymm8, %ymm8
	LONG $0x003d62c4; BYTE $0xc1   // vpshufb      %ymm1, %ymm8, %ymm8
	LONG $0xcadb3dc5               // vpand        %ymm2, %ymm8, %ymm9
	LONG $0xcbe435c5               // vpmulhuw     %ymm3, %ymm9, %ymm9
	LONG $0xc4db3dc5               // vpand        %ymm4, %ymm8, %ymm8
	LONG $0x712dc1c4; WORD $0x08f0 // vpsllw       $8, %ymm8, %ymm10
	LONG $0x713dc1c4; WORD $0x04f0 // vpsllw       $4, %ymm8, %ymm8
	LONG $0x0e3d43c4; WORD $0xaac2 // vpblendw     $170, %ymm10, %ymm8, %ymm8
	LONG $0xeb3d41c4; BYTE $0xc1   // vpor         %ymm9, %ymm8, %ymm8
	LONG $0x645541c4; BYTE $0xc8   // vpcmpgtb     %ymm8, %ymm5, %ymm9
	LONG $0xcfdb35c5               // vpand        %ymm7, %ymm9, %ymm9
	LONG $0xd6d83dc5               // vpsubusb     %ymm6, %ymm8, %ymm10
	LONG $0xeb3541c4; BYTE $0xca   // vpor         %ymm10, %ymm9, %ymm9
	LONG $0x007d42c4; BYTE $0xc9   // vpshufb      %ymm9, %ymm0, %ymm9
	LONG $0xfc3541c4; BYTE $0xc0   // vpaddb       %ymm8, %ymm9, %ymm8
	LONG $0x7f7e41c4; BYTE $0x06   // vmovdqu      %ymm8, (%r14)
	ADDQ $32, R14
	ADDQ $24, R12
	CMPQ R12, SI
	JBE  LBB0_6
	JMP  LBB0_7

LBB0_2:
	MOVQ R8, R14

LBB0_7:
	LEAQ -24(R9), SI
	CMPQ R12, SI
	JA   LBB0_10

LBB0_8:
	MOVL DX, SI
	ANDL $4, SI
	JE   LBB0_10
	LONG $0x6f7ac1c4; WORD $0x2404             // vmovdqu      (%r12), %xmm0
	LONG $0x6f7ac1c4; WORD $0x244c; BYTE $0x08 // vmovdqu      $8(%r12), %xmm1
	LONG $0xd973f1c5; BYTE $0x04               // vpsrldq      $4, %xmm1, %xmm1
	LONG $0x387de3c4; WORD $0x01c1             // vinserti128  $1, %xmm1, %ymm0, %ymm0
	QUAD $0xfffddc05007de2c4; BYTE $0xff       // vpshufb      $-548(%rip), %ymm0, %ymm0  /* LCPI0_0(%rip) */
	QUAD $0xfffffdf40ddbfdc5                   // vpand        $-524(%rip), %ymm0, %ymm1  /* LCPI0_1(%rip) */
	QUAD $0xfffffe0c0de4f5c5                   // vpmulhuw     $-500(%rip), %ymm1, %ymm1  /* LCPI0_2(%rip) */
	QUAD $0xfffffe2405dbfdc5                   // vpand        $-476(%rip), %ymm0, %ymm0  /* LCPI0_3(%rip) */
	LONG $0xf071edc5; BYTE $0x08               // vpsllw       $8, %ymm0, %ymm2
	LONG $0xf071fdc5; BYTE $0x04               // vpsllw       $4, %ymm0, %ymm0
	LONG $0x0e7de3c4; WORD $0xaac2             // vpblendw     $170, %ymm2, %ymm0, %ymm0
	LONG $0xc1ebfdc5                           // vpor         %ymm1, %ymm0, %ymm0
	QUAD $0xfffffe280d6ffec5                   // vmovdqu      $-472(%rip), %ymm1  /* LCPI0_4(%rip) */
	LONG $0xc864f5c5                           // vpcmpgtb     %ymm0, %ymm1, %ymm1
	LONG $0x6f7ec1c4; BYTE $0x12               // vmovdqu      (%r10), %ymm2
	QUAD $0xfffffe371dd8fdc5                   // vpsubusb     $-457(%rip), %ymm0, %ymm3  /* LCPI0_5(%rip) */
	QUAD $0xfffffe4f0ddbf5c5                   // vpand        $-433(%rip), %ymm1, %ymm1  /* LCPI0_6(%rip) */
	LONG $0xcbebf5c5                           // vpor         %ymm3, %ymm1, %ymm1
	LONG $0x006de2c4; BYTE $0xc9               // vpshufb      %ymm1, %ymm2, %ymm1
	LONG $0xc0fcf5c5                           // vpaddb       %ymm0, %ymm1, %ymm0
	LONG $0x7f7ec1c4; BYTE $0x06               // vmovdqu      %ymm0, (%r14)
	ADDQ $32, R14
	ADDQ $24, R12

LBB0_10:
	CMPQ R12, R9
	JE   LBB0_25
	LEAQ -4(R9), R10
	CMPQ R12, R10
	JA   LBB0_14

LBB0_12:
	MOVL    0(R12), SI
	BSWAPL  SI
	MOVQ    SI, R15
	SHRQ    $26, R15
	MOVL    SI, CX
	SHRL    $20, CX
	ANDL    $63, CX
	MOVL    SI, BX
	SHRL    $14, BX
	ANDL    $63, BX
	SHRL    $8, SI
	ANDL    $63, SI
	ADDQ    $3, R12
	MOVBLZX 0(R11)(R15*1), AX
	MOVB    AX, 0(R14)
	MOVBLZX 0(R11)(CX*1), AX
	MOVB    AX, 1(R14)
	MOVBLZX 0(R11)(BX*1), AX
	MOVB    AX, 2(R14)
	MOVBLZX 0(R11)(SI*1), AX
	MOVB    AX, 3(R14)
	ADDQ    $4, R14
	CMPQ    R12, R10
	JBE     LBB0_12

LBB0_14:
	SUBQ    R12, R9
	MOVBLZX 0(R12), R10
	CMPQ    R9, $1
	JE      LBB0_21
	MOVQ    R10, SI
	SHLQ    $16, SI
	CMPQ    R9, $2
	JE      LBB0_18
	CMPQ    R9, $3
	JNE     LBB0_25
	MOVBLZX 2(R12), DX
	ORL     DX, SI
	MOVBLZX 1(R12), AX
	SHLL    $8, AX
	ORL     SI, AX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), CX
	MOVB    CX, 0(R14)
	MOVL    AX, CX
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	SHRL    $6, AX
	ANDL    $63, AX
	MOVB    0(R11)(AX*1), AX
	MOVB    AX, 2(R14)
	ANDL    $63, DX
	MOVB    0(R11)(DX*1), AX
	MOVB    AX, 3(R14)
	JMP     LBB0_24

LBB0_4:
	MOVQ R8, R14
	LEAQ -24(R9), SI
	CMPQ R12, SI
	JBE  LBB0_8
	JMP  LBB0_10

LBB0_18:
	MOVBLZX 1(R12), AX
	MOVL    AX, CX
	SHLL    $8, CX
	ORL     SI, CX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), BX
	MOVB    BX, 0(R14)
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	ANDL    $15, AX
	MOVB    0(R11)(AX*4), AX
	MOVB    AX, 2(R14)
	TESTB   $2, DX
	JNE     LBB0_19
	MOVB    $61, 3(R14)
	JMP     LBB0_24

LBB0_21:
	MOVQ  R10, AX
	SHRQ  $2, AX
	MOVB  0(R11)(AX*1), AX
	MOVB  AX, 0(R14)
	SHLL  $4, R10
	ANDL  $48, R10
	MOVB  0(R11)(R10*1), AX
	MOVB  AX, 1(R14)
	TESTB $2, DX
	JNE   LBB0_22
	MOVW  $15677, 2(R14)

LBB0_24:
	ADDQ $4, R14
	JMP  LBB0_25

LBB0_19:
	ADDQ $3, R14
	JMP  LBB0_25

LBB0_22:
	ADDQ $2, R14

LBB0_25:
	SUBQ R8, R14
	ADDQ R14, 8(DI)

LBB0_26:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LCPI1_0:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_1:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_2:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84

LCPI1_3:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112

LCPI1_4:
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'

LCPI1_5:
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'

LCPI1_6:
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'

LCPI1_7:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI1_8:
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'

LCPI1_9:
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_10:
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'

LCPI1_11:
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1

LCPI1_12:
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1

LCPI1_14:
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'

LCPI1_13:
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6

_b64decode:
	TESTQ DX, DX
	JE    LBB1_1
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5541                               // pushq        %r13
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	ANDQ  $-32, SP
	SUBQ  $224, SP
	MOVL  CX, BX
	MOVQ  0(DI), AX
	MOVQ  8(DI), R8
	ADDQ  AX, R8
	MOVQ  R8, 8(SP)
	MOVQ  DI, 56(SP)
	ADDQ  16(DI), AX
	MOVQ  AX, 40(SP)
	MOVQ  SI, 16(SP)
	LEAQ  0(SI)(DX*1), DI
	TESTB $1, BX
	LONG  $0x9e058d48; WORD $0x0006; BYTE $0x00 // leaq         $1694(%rip), %rax  /* _VecDecodeCharsetStd(%rip) */
	LONG  $0x972d8d4c; WORD $0x0007; BYTE $0x00 // leaq         $1943(%rip), %r13  /* _VecDecodeCharsetURL(%rip) */
	LONG  $0xe8440f4c                           // cmoveq       %rax, %r13
	MOVQ  R8, 48(SP)
	MOVQ  SI, CX
	TESTB $4, BX
	MOVQ  SI, 24(SP)
	MOVQ  DI, 32(SP)
	JE    LBB1_26
	LEAQ  0(SI)(DX*1), R14
	ADDQ  $-32, R14
	MOVQ  48(SP), R8
	MOVQ  SI, CX
	CMPQ  R14, SI
	JB    LBB1_26
	TESTB $1, BX
	JE    LBB1_5
	QUAD  $0xfffffdb10528fcc5                   // vmovaps      $-591(%rip), %ymm0  /* LCPI1_1(%rip) */
	QUAD  $0x000080248429fcc5; BYTE $0x00       // vmovaps      %ymm0, $128(%rsp)
	JE    LBB1_8

LBB1_9:
	QUAD $0xfffffdde256ffec5 // vmovdqu      $-546(%rip), %ymm4  /* LCPI1_3(%rip) */
	JE   LBB1_11

LBB1_12:
	QUAD $0xfffffe140528fcc5       // vmovaps      $-492(%rip), %ymm0  /* LCPI1_5(%rip) */
	LONG $0x4429fcc5; WORD $0x6024 // vmovaps      %ymm0, $96(%rsp)
	JE   LBB1_14

LBB1_15:
	QUAD $0xfffffe44056ffec5 // vmovdqu      $-444(%rip), %ymm0  /* LCPI1_7(%rip) */
	JMP  LBB1_16

LBB1_1:
	XORL DX, DX
	MOVQ DX, AX
	RET

LBB1_5:
	QUAD $0xfffffd540528fcc5             // vmovaps      $-684(%rip), %ymm0  /* LCPI1_0(%rip) */
	QUAD $0x000080248429fcc5; BYTE $0x00 // vmovaps      %ymm0, $128(%rsp)
	JNE  LBB1_9

LBB1_8:
	QUAD $0xfffffd81256ffec5 // vmovdqu      $-639(%rip), %ymm4  /* LCPI1_2(%rip) */
	JNE  LBB1_12

LBB1_11:
	QUAD $0xfffffdb70528fcc5       // vmovaps      $-585(%rip), %ymm0  /* LCPI1_4(%rip) */
	LONG $0x4429fcc5; WORD $0x6024 // vmovaps      %ymm0, $96(%rsp)
	JNE  LBB1_15

LBB1_14:
	QUAD $0xfffffde7056ffec5 // vmovdqu      $-537(%rip), %ymm0  /* LCPI1_6(%rip) */

LBB1_16:
	LONG $0x447ffdc5; WORD $0x4024       // vmovdqa      %ymm0, $64(%rsp)
	MOVQ 40(SP), AX
	LEAQ -32(AX), R15
	QUAD $0xfffffe102d6ffec5             // vmovdqu      $-496(%rip), %ymm5  /* LCPI1_8(%rip) */
	QUAD $0xfffffe28356ffec5             // vmovdqu      $-472(%rip), %ymm6  /* LCPI1_9(%rip) */
	LONG $0xffefc1c5                     // vpxor        %xmm7, %xmm7, %xmm7
	MOVQ $-4294967296, R12
	MOVQ 24(SP), CX
	QUAD $0x0000a024a47ffdc5; BYTE $0x00 // vmovdqa      %ymm4, $160(%rsp)
	JMP  LBB1_17

LBB1_20:
	LONG $0x007ffac5               // vmovdqu      %xmm0, (%rax)
	LONG $0x397de3c4; WORD $0x01c0 // vextracti128 $1, %ymm0, %xmm0
	LONG $0x40d6f9c5; BYTE $0x10   // vmovq        %xmm0, $16(%rax)

LBB1_21:
	ADDQ $32, CX
	MOVQ CX, 16(SP)
	ADDQ $24, AX
	MOVQ AX, 8(SP)
	CMPQ CX, R14
	JA   LBB1_25

LBB1_17:
	LONG  $0x016ffec5                     // vmovdqu      (%rcx), %ymm0
	LONG  $0xd072f5c5; BYTE $0x04         // vpsrld       $4, %ymm0, %ymm1
	LONG  $0xcddbf5c5                     // vpand        %ymm5, %ymm1, %ymm1
	LONG  $0xd5dbfdc5                     // vpand        %ymm5, %ymm0, %ymm2
	LONG  $0x005de2c4; BYTE $0xd2         // vpshufb      %ymm2, %ymm4, %ymm2
	LONG  $0x004de2c4; BYTE $0xd9         // vpshufb      %ymm1, %ymm6, %ymm3
	LONG  $0xd2dbe5c5                     // vpand        %ymm2, %ymm3, %ymm2
	LONG  $0xd774edc5                     // vpcmpeqb     %ymm7, %ymm2, %ymm2
	LONG  $0xc2d7fdc5                     // vpmovmskb    %ymm2, %eax
	ORQ   R12, AX
	BSFQ  AX, AX
	CMPL  AX, $32
	JAE   LBB1_18
	MOVQ  32(SP), DI
	LEAQ  16(SP), SI
	LEAQ  8(SP), DX
	MOVQ  R13, CX
	MOVL  BX, R8
	WORD  $0xf8c5; BYTE $0x77             // vzeroupper
	LONG  $0x000331e8; BYTE $0x00         // callq        _decode_block
	MOVQ  16(SP), CX
	TESTQ AX, AX
	JNE   LBB1_48
	QUAD  $0x0000a024a46ffdc5; BYTE $0x00 // vmovdqa      $160(%rsp), %ymm4
	QUAD  $0xfffffd512d6ffec5             // vmovdqu      $-687(%rip), %ymm5  /* LCPI1_8(%rip) */
	QUAD  $0xfffffd69356ffec5             // vmovdqu      $-663(%rip), %ymm6  /* LCPI1_9(%rip) */
	LONG  $0xffefc1c5                     // vpxor        %xmm7, %xmm7, %xmm7
	CMPQ  CX, R14
	JBE   LBB1_17
	JMP   LBB1_25

LBB1_18:
	QUAD $0x00008024946ffdc5; BYTE $0x00 // vmovdqa      $128(%rsp), %ymm2
	LONG $0x006de2c4; BYTE $0xc9         // vpshufb      %ymm1, %ymm2, %ymm1
	LONG $0x5474fdc5; WORD $0x6024       // vpcmpeqb     $96(%rsp), %ymm0, %ymm2
	QUAD $0x2040244c4c75e3c4             // vpblendvb    %ymm2, $64(%rsp), %ymm1, %ymm1
	LONG $0xc0fcf5c5                     // vpaddb       %ymm0, %ymm1, %ymm0
	QUAD $0xfffffd5605dbfdc5             // vpand        $-682(%rip), %ymm0, %ymm0  /* LCPI1_10(%rip) */
	QUAD $0xfffd6d05047de2c4; BYTE $0xff // vpmaddubsw   $-659(%rip), %ymm0, %ymm0  /* LCPI1_11(%rip) */
	QUAD $0xfffffd8505f5fdc5             // vpmaddwd     $-635(%rip), %ymm0, %ymm0  /* LCPI1_12(%rip) */
	LONG $0x397de3c4; WORD $0x01c1       // vextracti128 $1, %ymm0, %xmm1
	QUAD $0xfffdb60d0071e2c4; BYTE $0xff // vpshufb      $-586(%rip), %xmm1, %xmm1  /* LCPI1_13(%rip) */
	QUAD $0xfffd8d05007de2c4; BYTE $0xff // vpshufb      $-627(%rip), %ymm0, %ymm0  /* LCPI1_14(%rip) */
	LONG $0x027de3c4; WORD $0x08c1       // vpblendd     $8, %ymm1, %ymm0, %ymm0
	LONG $0x027de3c4; WORD $0xc0c7       // vpblendd     $192, %ymm7, %ymm0, %ymm0
	MOVQ 8(SP), AX
	CMPQ AX, R15
	JA   LBB1_20
	LONG $0x007ffec5                     // vmovdqu      %ymm0, (%rax)
	JMP  LBB1_21

LBB1_25:
	MOVQ 8(SP), R8
	MOVQ 32(SP), DI

LBB1_26:
	LEAQ -8(DI), AX
	MOVQ AX, 128(SP)
	CMPQ CX, AX
	MOVL BX, 64(SP)
	JA   LBB1_28
	MOVQ 40(SP), AX
	ADDQ $-8, AX
	MOVQ AX, 96(SP)
	CMPQ R8, AX
	JA   LBB1_28

LBB1_34:
	MOVBLZX 0(CX), AX
	MOVBLZX 0(R13)(AX*1), R9
	MOVBLZX 1(CX), AX
	MOVBLZX 0(R13)(AX*1), R12
	MOVBLZX 2(CX), AX
	MOVBLZX 0(R13)(AX*1), R11
	MOVBLZX 3(CX), AX
	MOVBLZX 0(R13)(AX*1), DX
	MOVBLZX 4(CX), AX
	MOVBLZX 0(R13)(AX*1), R10
	MOVBLZX 5(CX), AX
	MOVBLZX 0(R13)(AX*1), DI
	MOVBLZX 6(CX), AX
	MOVBLZX 0(R13)(AX*1), AX
	MOVBLZX 7(CX), BX
	MOVBLZX 0(R13)(BX*1), BX
	MOVL    R12, SI
	ORL     R9, SI
	MOVL    DX, R14
	ORL     R11, R14
	ORL     SI, R14
	MOVL    DI, SI
	ORL     R10, SI
	MOVL    AX, R15
	ORL     SI, R15
	ORL     R14, R15
	MOVL    BX, SI
	ORL     R15, SI
	CMPB    SI, $-1
	JE      LBB1_35
	SHLQ    $58, R9
	SHLQ    $52, R12
	ORQ     R9, R12
	SHLQ    $46, R11
	SHLQ    $40, DX
	ORQ     R11, DX
	ORQ     R12, DX
	SHLQ    $34, R10
	SHLQ    $28, DI
	ORQ     R10, DI
	SHLQ    $22, AX
	ORQ     DI, AX
	ORQ     DX, AX
	SHLQ    $16, BX
	ORQ     AX, BX
	BSWAPQ  BX
	MOVQ    BX, 0(R8)
	ADDQ    $8, CX
	MOVQ    CX, 16(SP)
	ADDQ    $6, R8
	MOVQ    R8, 8(SP)
	CMPQ    CX, 128(SP)
	JBE     LBB1_39
	JMP     LBB1_28

LBB1_35:
	MOVQ  32(SP), DI
	LEAQ  16(SP), SI
	LEAQ  8(SP), DX
	MOVQ  R13, CX
	MOVL  64(SP), R8
	WORD  $0xf8c5; BYTE $0x77     // vzeroupper
	LONG  $0x000162e8; BYTE $0x00 // callq        _decode_block
	MOVQ  16(SP), CX
	TESTQ AX, AX
	JNE   LBB1_48
	MOVQ  8(SP), R8
	CMPQ  CX, 128(SP)
	JA    LBB1_28

LBB1_39:
	CMPQ R8, 96(SP)
	JBE  LBB1_34

LBB1_28:
	MOVQ 32(SP), R12
	LEAQ -4(R12), R14
	CMPQ CX, R14
	JA   LBB1_40
	MOVQ 40(SP), AX
	ADDQ $-4, AX
	CMPQ R8, AX
	JA   LBB1_40
	MOVQ AX, R15

LBB1_31:
	MOVBLZX 0(CX), AX
	MOVBLZX 0(R13)(AX*1), R9
	MOVBLZX 1(CX), AX
	MOVBLZX 0(R13)(AX*1), BX
	MOVBLZX 2(CX), DX
	MOVBLZX 0(R13)(DX*1), SI
	MOVBLZX 3(CX), DX
	MOVBLZX 0(R13)(DX*1), DX
	MOVL    BX, AX
	ORL     R9, AX
	MOVL    SI, DI
	ORL     DX, DI
	ORL     AX, DI
	CMPB    DI, $-1
	JE      LBB1_32
	SHLL    $26, R9
	SHLL    $20, BX
	ORL     R9, BX
	SHLL    $14, SI
	SHLL    $8, DX
	ORL     SI, DX
	ORL     BX, DX
	BSWAPL  DX
	MOVL    DX, 0(R8)
	ADDQ    $4, CX
	MOVQ    CX, 16(SP)
	ADDQ    $3, R8
	MOVQ    R8, 8(SP)
	CMPQ    CX, R14
	JBE     LBB1_47
	JMP     LBB1_40

LBB1_32:
	MOVQ  R12, DI
	LEAQ  16(SP), SI
	LEAQ  8(SP), DX
	MOVQ  R13, CX
	MOVL  64(SP), R8
	WORD  $0xf8c5; BYTE $0x77     // vzeroupper
	LONG  $0x00008be8; BYTE $0x00 // callq        _decode_block
	MOVQ  16(SP), CX
	TESTQ AX, AX
	JNE   LBB1_48
	MOVQ  8(SP), R8
	CMPQ  CX, R14
	JA    LBB1_40

LBB1_47:
	CMPQ R8, R15
	JBE  LBB1_31

LBB1_40:
	CMPQ CX, R12
	MOVL 64(SP), BX
	JAE  LBB1_44
	LEAQ 16(SP), R14
	LEAQ 8(SP), R15

LBB1_42:
	MOVQ  R12, DI
	MOVQ  R14, SI
	MOVQ  R15, DX
	MOVQ  R13, CX
	MOVL  BX, R8
	WORD  $0xf8c5; BYTE $0x77     // vzeroupper
	LONG  $0x000044e8; BYTE $0x00 // callq        _decode_block
	MOVQ  16(SP), CX
	TESTQ AX, AX
	JNE   LBB1_48
	CMPQ  CX, R12
	JB    LBB1_42

LBB1_44:
	MOVQ 8(SP), DX
	SUBQ 48(SP), DX
	MOVQ 56(SP), AX
	ADDQ DX, 8(AX)
	JMP  LBB1_49

LBB1_48:
	MOVQ 24(SP), DX
	SUBQ AX, DX
	SUBQ CX, DX

LBB1_49:
	LEAQ -40(BP), SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	MOVQ DX, AX
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

_decode_block:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD $0x5641             // pushq        %r14
	BYTE $0x53               // pushq        %rbx
	MOVQ DX, R9
	MOVQ 0(DX), R11
	MOVQ 0(SI), R10
	XORL BX, BX
	MOVQ R10, AX
	MOVL $0, R14
	CMPQ R10, DI
	JAE  LBB2_9
	XORL BX, BX
	MOVQ R10, AX
	XORL R14, R14

LBB2_2:
	MOVBLZX 0(AX), DX
	CMPQ    DX, $10
	JE      LBB2_6
	CMPB    DX, $13
	JE      LBB2_6
	MOVBLZX 0(CX)(DX*1), DX
	CMPL    DX, $255
	JE      LBB2_8
	ADDL    $1, BX
	SHLL    $6, R14
	ORL     DX, R14

LBB2_6:
	ADDQ $1, AX
	CMPQ AX, DI
	JAE  LBB2_8
	CMPL BX, $4
	JL   LBB2_2

LBB2_8:
	CMPL BX, $1
	JE   LBB2_12

LBB2_9:
	CMPQ AX, DI
	JAE  LBB2_13
	CMPL BX, $3
	JG   LBB2_13
	MOVL R8, CX
	ANDL $2, CX
	JE   LBB2_13

LBB2_12:
	SUBQ R10, AX
	ADDQ $1, AX
	BYTE $0x5b   // popq         %rbx
	WORD $0x5e41 // popq         %r14
	BYTE $0x5d   // popq         %rbp
	RET

LBB2_13:
	CMPL BX, $3
	JG   LBB2_19
	CMPQ AX, DI
	JE   LBB2_20
	CMPL BX, $3
	JNE  LBB2_22
	LEAQ 1(AX), R8
	CMPB 0(AX), $61
	JNE  LBB2_25

LBB2_17:
	CMPQ R8, DI
	JAE  LBB2_28
	SUBQ R10, R8
	ADDQ $1, R8
	JMP  LBB2_26

LBB2_19:
	MOVQ R11, DX
	MOVL R14, CX
	CMPL BX, $2
	JNE  LBB2_29
	JMP  LBB2_33

LBB2_20:
	TESTB $2, R8
	JNE   LBB2_27
	SUBQ  R10, DI
	ADDQ  $1, DI
	MOVQ  DI, AX
	BYTE  $0x5b   // popq         %rbx
	WORD  $0x5e41 // popq         %r14
	BYTE  $0x5d   // popq         %rbp
	RET

LBB2_22:
	LEAQ -1(DI), CX
	CMPQ AX, CX
	JAE  LBB2_12
	CMPB 0(AX), $61
	JNE  LBB2_35
	LEAQ 2(AX), R8
	CMPB 1(AX), $61
	JE   LBB2_17

LBB2_25:
	SUBQ R10, R8

LBB2_26:
	MOVQ R8, AX
	BYTE $0x5b   // popq         %rbx
	WORD $0x5e41 // popq         %r14
	BYTE $0x5d   // popq         %rbp
	RET

LBB2_27:
	MOVQ DI, R8

LBB2_28:
	MOVQ    R11, DX
	MOVB    $4, AX
	SUBB    BX, AX
	MOVBLZX AX, AX
	ADDL    AX, AX
	LEAL    0(AX)(AX*2), CX
	SHLL    CX, R14
	MOVL    R14, CX
	MOVQ    R8, AX
	CMPL    BX, $2
	JE      LBB2_33

LBB2_29:
	CMPL BX, $3
	JE   LBB2_32
	CMPL BX, $4
	JNE  LBB2_34
	MOVB CX, 2(DX)

LBB2_32:
	MOVB CH, 1(DX)

LBB2_33:
	SHRL $16, CX
	MOVB CX, 0(DX)

LBB2_34:
	MOVQ    AX, 0(SI)
	MOVLQSX BX, AX
	ADDQ    DX, AX
	ADDQ    $-1, AX
	MOVQ    AX, 0(R9)
	XORL    AX, AX
	BYTE    $0x5b     // popq         %rbx
	WORD    $0x5e41   // popq         %r14
	BYTE    $0x5d     // popq         %rbp
	RET

LBB2_35:
	ADDQ $1, AX
	SUBQ R10, AX
	BYTE $0x5b   // popq         %rbx
	WORD $0x5e41 // popq         %r14
	BYTE $0x5d   // popq         %rbp
	RET

_TabEncodeCharsetStd:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x2f2b393837363534 // .ascii 16, 'wxyz0123456789+/'

_VecEncodeCharsetStd:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'

_TabEncodeCharsetURL:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x5f2d393837363534 // .ascii 16, 'wxyz0123456789-_'

_VecEncodeCharsetURL:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'

_VecDecodeCharsetStd:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0x3fffffff3effffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff\xff?'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0xffffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff\xff'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

_VecDecodeCharsetURL:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffff3effffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0x3fffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff?'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

TEXT Â·__b64decode(SB), NOSPLIT, $0 - 40
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ mode+24(FP), CX
	CALL Â·__native_entry__+1502(SB) // _b64decode
	MOVQ AX, ret+32(FP)
	RET

TEXT Â·__b64encode(SB), NOSPLIT, $0 - 24
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ mode+16(FP), DX
	LEAQ Â·__native_entry__+237(SB), AX // _b64encode
	JMP  AX
