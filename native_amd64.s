// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT Â·__native_entry__(SB), NOSPLIT, $0
	NO_LOCAL_POINTERS
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff // leaq         $-7(%rip), %rax
	MOVQ AX, 8(SP)
	RET

LCPI0_0:
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10

LCPI0_1:
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032

LCPI0_2:
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024

LCPI0_3:
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63

LCPI0_4:
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'

LCPI0_5:
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'

LCPI0_6:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

_b64encode:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	MOVQ  8(SI), R9
	TESTQ R9, R9
	JE    LBB0_25
	MOVQ  0(DI), R8
	ADDQ  8(DI), R8
	MOVQ  0(SI), R12
	ADDQ  R12, R9
	TESTB $1, DX
	LONG  $0x5b0d8d48; WORD $0x000e; BYTE $0x00 // leaq         $3675(%rip), %rcx  /* _VecEncodeCharsetStd(%rip) */
	LONG  $0xb4158d4c; WORD $0x000e; BYTE $0x00 // leaq         $3764(%rip), %r10  /* _VecEncodeCharsetURL(%rip) */
	LONG  $0xd1440f4c                           // cmoveq       %rcx, %r10
	LONG  $0x090d8d48; WORD $0x000e; BYTE $0x00 // leaq         $3593(%rip), %rcx  /* _TabEncodeCharsetStd(%rip) */
	LONG  $0x621d8d4c; WORD $0x000e; BYTE $0x00 // leaq         $3682(%rip), %r11  /* _TabEncodeCharsetURL(%rip) */
	LONG  $0xd9440f4c                           // cmoveq       %rcx, %r11
	MOVL  DX, CX
	ANDL  $4, CX
	MOVL  CX, BX
	SHRL  $2, BX
	TESTL CX, CX
	JE    LBB0_7
	LEAQ  -28(R9), SI
	CMPQ  R12, SI
	JA    LBB0_7
	LONG  $0x6f7ec1c4; BYTE $0x02               // vmovdqu      (%r10), %ymm0
	QUAD  $0xfffffea80d6ffec5                   // vmovdqu      $-344(%rip), %ymm1  /* LCPI0_0(%rip) */
	QUAD  $0xfffffec0156ffec5                   // vmovdqu      $-320(%rip), %ymm2  /* LCPI0_1(%rip) */
	QUAD  $0xfffffed81d6ffec5                   // vmovdqu      $-296(%rip), %ymm3  /* LCPI0_2(%rip) */
	QUAD  $0xfffffef0256ffec5                   // vmovdqu      $-272(%rip), %ymm4  /* LCPI0_3(%rip) */
	QUAD  $0xffffff082d6ffec5                   // vmovdqu      $-248(%rip), %ymm5  /* LCPI0_4(%rip) */
	QUAD  $0xffffff20356ffec5                   // vmovdqu      $-224(%rip), %ymm6  /* LCPI0_5(%rip) */
	QUAD  $0xffffff383d6ffec5                   // vmovdqu      $-200(%rip), %ymm7  /* LCPI0_6(%rip) */
	MOVQ  R8, R14

LBB0_4:
	LONG  $0x6f7a41c4; WORD $0x2404 // vmovdqu      (%r12), %xmm8
	QUAD  $0x010c2444383d43c4       // vinserti128  $1, $12(%r12), %ymm8, %ymm8
	LONG  $0x003d62c4; BYTE $0xc1   // vpshufb      %ymm1, %ymm8, %ymm8
	LONG  $0xcadb3dc5               // vpand        %ymm2, %ymm8, %ymm9
	LONG  $0xcbe435c5               // vpmulhuw     %ymm3, %ymm9, %ymm9
	LONG  $0xc4db3dc5               // vpand        %ymm4, %ymm8, %ymm8
	LONG  $0x712dc1c4; WORD $0x08f0 // vpsllw       $8, %ymm8, %ymm10
	LONG  $0x713dc1c4; WORD $0x04f0 // vpsllw       $4, %ymm8, %ymm8
	LONG  $0x0e3d43c4; WORD $0xaac2 // vpblendw     $170, %ymm10, %ymm8, %ymm8
	LONG  $0xeb3d41c4; BYTE $0xc1   // vpor         %ymm9, %ymm8, %ymm8
	LONG  $0x645541c4; BYTE $0xc8   // vpcmpgtb     %ymm8, %ymm5, %ymm9
	LONG  $0xcfdb35c5               // vpand        %ymm7, %ymm9, %ymm9
	LONG  $0xd6d83dc5               // vpsubusb     %ymm6, %ymm8, %ymm10
	LONG  $0xeb3541c4; BYTE $0xca   // vpor         %ymm10, %ymm9, %ymm9
	LONG  $0x007d42c4; BYTE $0xc9   // vpshufb      %ymm9, %ymm0, %ymm9
	LONG  $0xfc3541c4; BYTE $0xc0   // vpaddb       %ymm8, %ymm9, %ymm8
	LONG  $0x7f7e41c4; BYTE $0x06   // vmovdqu      %ymm8, (%r14)
	ADDQ  $32, R14
	ADDQ  $24, R12
	CMPQ  R12, SI
	JBE   LBB0_4
	MOVB  $1, BX
	TESTB BX, BX
	JNE   LBB0_8
	JMP   LBB0_10

LBB0_7:
	MOVQ  R8, R14
	TESTB BX, BX
	JE    LBB0_10

LBB0_8:
	LEAQ -24(R9), SI
	CMPQ R12, SI
	JA   LBB0_10
	LONG $0x6f7ac1c4; WORD $0x2404             // vmovdqu      (%r12), %xmm0
	LONG $0x6f7ac1c4; WORD $0x244c; BYTE $0x08 // vmovdqu      $8(%r12), %xmm1
	LONG $0xd973f1c5; BYTE $0x04               // vpsrldq      $4, %xmm1, %xmm1
	LONG $0x387de3c4; WORD $0x01c1             // vinserti128  $1, %xmm1, %ymm0, %ymm0
	QUAD $0xfffdcd05007de2c4; BYTE $0xff       // vpshufb      $-563(%rip), %ymm0, %ymm0  /* LCPI0_0(%rip) */
	QUAD $0xfffffde50ddbfdc5                   // vpand        $-539(%rip), %ymm0, %ymm1  /* LCPI0_1(%rip) */
	QUAD $0xfffffdfd0de4f5c5                   // vpmulhuw     $-515(%rip), %ymm1, %ymm1  /* LCPI0_2(%rip) */
	QUAD $0xfffffe1505dbfdc5                   // vpand        $-491(%rip), %ymm0, %ymm0  /* LCPI0_3(%rip) */
	LONG $0xf071edc5; BYTE $0x08               // vpsllw       $8, %ymm0, %ymm2
	LONG $0xf071fdc5; BYTE $0x04               // vpsllw       $4, %ymm0, %ymm0
	LONG $0x0e7de3c4; WORD $0xaac2             // vpblendw     $170, %ymm2, %ymm0, %ymm0
	LONG $0xc1ebfdc5                           // vpor         %ymm1, %ymm0, %ymm0
	QUAD $0xfffffe190d6ffec5                   // vmovdqu      $-487(%rip), %ymm1  /* LCPI0_4(%rip) */
	LONG $0xc864f5c5                           // vpcmpgtb     %ymm0, %ymm1, %ymm1
	LONG $0x6f7ec1c4; BYTE $0x12               // vmovdqu      (%r10), %ymm2
	QUAD $0xfffffe281dd8fdc5                   // vpsubusb     $-472(%rip), %ymm0, %ymm3  /* LCPI0_5(%rip) */
	QUAD $0xfffffe400ddbf5c5                   // vpand        $-448(%rip), %ymm1, %ymm1  /* LCPI0_6(%rip) */
	LONG $0xcbebf5c5                           // vpor         %ymm3, %ymm1, %ymm1
	LONG $0x006de2c4; BYTE $0xc9               // vpshufb      %ymm1, %ymm2, %ymm1
	LONG $0xc0fcf5c5                           // vpaddb       %ymm0, %ymm1, %ymm0
	LONG $0x7f7ec1c4; BYTE $0x06               // vmovdqu      %ymm0, (%r14)
	ADDQ $32, R14
	ADDQ $24, R12

LBB0_10:
	CMPQ R12, R9
	JE   LBB0_24
	LEAQ -4(R9), R10
	CMPQ R12, R10
	JA   LBB0_13

LBB0_12:
	MOVL    0(R12), SI
	BSWAPL  SI
	MOVQ    SI, R15
	SHRQ    $26, R15
	MOVL    SI, CX
	SHRL    $20, CX
	ANDL    $63, CX
	MOVL    SI, BX
	SHRL    $14, BX
	ANDL    $63, BX
	SHRL    $8, SI
	ANDL    $63, SI
	ADDQ    $3, R12
	MOVBLZX 0(R11)(R15*1), AX
	MOVB    AX, 0(R14)
	MOVBLZX 0(R11)(CX*1), AX
	MOVB    AX, 1(R14)
	MOVBLZX 0(R11)(BX*1), AX
	MOVB    AX, 2(R14)
	MOVBLZX 0(R11)(SI*1), AX
	MOVB    AX, 3(R14)
	ADDQ    $4, R14
	CMPQ    R12, R10
	JBE     LBB0_12

LBB0_13:
	SUBQ    R12, R9
	MOVBLZX 0(R12), R10
	CMPQ    R9, $1
	JE      LBB0_19
	MOVQ    R10, SI
	SHLQ    $16, SI
	CMPQ    R9, $2
	JE      LBB0_17
	CMPQ    R9, $3
	JNE     LBB0_24
	MOVBLZX 2(R12), DX
	ORL     DX, SI
	MOVBLZX 1(R12), AX
	SHLL    $8, AX
	ORL     SI, AX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), CX
	MOVB    CX, 0(R14)
	MOVL    AX, CX
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	SHRL    $6, AX
	ANDL    $63, AX
	MOVB    0(R11)(AX*1), AX
	MOVB    AX, 2(R14)
	ANDL    $63, DX
	MOVB    0(R11)(DX*1), AX
	MOVB    AX, 3(R14)
	JMP     LBB0_21

LBB0_17:
	MOVBLZX 1(R12), AX
	MOVL    AX, CX
	SHLL    $8, CX
	ORL     SI, CX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), BX
	MOVB    BX, 0(R14)
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	ANDL    $15, AX
	MOVB    0(R11)(AX*4), AX
	MOVB    AX, 2(R14)
	TESTB   $2, DX
	JNE     LBB0_22
	MOVB    $61, 3(R14)
	JMP     LBB0_21

LBB0_19:
	MOVQ  R10, AX
	SHRQ  $2, AX
	MOVB  0(R11)(AX*1), AX
	MOVB  AX, 0(R14)
	SHLL  $4, R10
	ANDL  $48, R10
	MOVB  0(R11)(R10*1), AX
	MOVB  AX, 1(R14)
	TESTB $2, DX
	JNE   LBB0_23
	MOVW  $15677, 2(R14)

LBB0_21:
	ADDQ $4, R14
	JMP  LBB0_24

LBB0_22:
	ADDQ $3, R14
	JMP  LBB0_24

LBB0_23:
	ADDQ $2, R14

LBB0_24:
	SUBQ R8, R14
	ADDQ R14, 8(DI)

LBB0_25:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LCPI1_0:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_1:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_2:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84

LCPI1_3:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112

LCPI1_4:
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'

LCPI1_5:
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'

LCPI1_6:
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'

LCPI1_7:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI1_8:
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'

LCPI1_9:
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_10:
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'

LCPI1_11:
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1

LCPI1_12:
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1

LCPI1_14:
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'

LCPI1_13:
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6

_b64decode:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5541                               // pushq        %r13
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	SUBQ  $96, SP
	TESTQ DX, DX
	JE    LBB1_1
	MOVQ  0(DI), AX
	MOVQ  8(DI), BX
	ADDQ  AX, BX
	MOVQ  DI, -112(BP)
	ADDQ  16(DI), AX
	MOVQ  AX, -88(BP)
	MOVQ  SI, R12
	MOVL  CX, AX
	LEAQ  0(SI)(DX*1), DI
	TESTB $1, AX
	LONG  $0xdd0d8d48; WORD $0x0009; BYTE $0x00 // leaq         $2525(%rip), %rcx  /* _VecDecodeCharsetStd(%rip) */
	LONG  $0xd6158d4c; WORD $0x000a; BYTE $0x00 // leaq         $2774(%rip), %r10  /* _VecDecodeCharsetURL(%rip) */
	LONG  $0xd1440f4c                           // cmoveq       %rcx, %r10
	MOVQ  BX, -80(BP)
	MOVQ  SI, -56(BP)
	MOVL  AX, -44(BP)
	TESTB $4, AX
	JE    LBB1_27
	MOVQ  -56(BP), AX
	LEAQ  0(AX)(DX*1), R8
	ADDQ  $-32, R8
	MOVQ  -80(BP), BX
	MOVQ  AX, R12
	CMPQ  R8, AX
	JB    LBB1_27
	TESTB $1, -44(BP)
	JE    LBB1_5
	QUAD  $0xfffffdc6056ffec5                   // vmovdqu      $-570(%rip), %ymm0  /* LCPI1_1(%rip) */
	JNE   LBB1_9

LBB1_8:
	QUAD $0xfffffddc0d6ffec5 // vmovdqu      $-548(%rip), %ymm1  /* LCPI1_2(%rip) */
	JNE  LBB1_12

LBB1_11:
	QUAD $0xfffffe12156ffec5 // vmovdqu      $-494(%rip), %ymm2  /* LCPI1_4(%rip) */
	JNE  LBB1_15

LBB1_14:
	QUAD $0xfffffe481d6ffec5 // vmovdqu      $-440(%rip), %ymm3  /* LCPI1_6(%rip) */
	JMP  LBB1_16

LBB1_1:
	XORL AX, AX
	JMP  LBB1_179

LBB1_5:
	QUAD $0xfffffd77056ffec5 // vmovdqu      $-649(%rip), %ymm0  /* LCPI1_0(%rip) */
	JE   LBB1_8

LBB1_9:
	QUAD $0xfffffdcd0d6ffec5 // vmovdqu      $-563(%rip), %ymm1  /* LCPI1_3(%rip) */
	JE   LBB1_11

LBB1_12:
	QUAD $0xfffffe03156ffec5 // vmovdqu      $-509(%rip), %ymm2  /* LCPI1_5(%rip) */
	JE   LBB1_14

LBB1_15:
	QUAD $0xfffffe391d6ffec5 // vmovdqu      $-455(%rip), %ymm3  /* LCPI1_7(%rip) */

LBB1_16:
	MOVQ -88(BP), AX
	LEAQ -32(AX), R14
	LEAQ -1(DI), R15
	LEAQ 1(DI), R11
	QUAD $0xfffffe41256ffec5 // vmovdqu      $-447(%rip), %ymm4  /* LCPI1_8(%rip) */
	QUAD $0xfffffe592d6ffec5 // vmovdqu      $-423(%rip), %ymm5  /* LCPI1_9(%rip) */
	LONG $0xf6efc9c5         // vpxor        %xmm6, %xmm6, %xmm6
	QUAD $0xfffffe8d056f7ec5 // vmovdqu      $-371(%rip), %ymm8  /* LCPI1_11(%rip) */
	QUAD $0xfffffea50d6f7ec5 // vmovdqu      $-347(%rip), %ymm9  /* LCPI1_12(%rip) */
	QUAD $0xfffffedd156f7ac5 // vmovdqu      $-291(%rip), %xmm10  /* LCPI1_13(%rip) */
	QUAD $0xfffffeb51d6f7ec5 // vmovdqu      $-331(%rip), %ymm11  /* LCPI1_14(%rip) */
	MOVQ $-4294967296, R13
	MOVQ -56(BP), R12
	MOVQ -80(BP), BX
	JMP  LBB1_17

LBB1_69:
	LONG $0x237f7ac5               // vmovdqu      %xmm12, (%rbx)
	LONG $0x397d63c4; WORD $0x01e7 // vextracti128 $1, %ymm12, %xmm7
	LONG $0x7bd6f9c5; BYTE $0x10   // vmovq        %xmm7, $16(%rbx)

LBB1_70:
	ADDQ $32, R12
	ADDQ $24, BX

LBB1_71:
	CMPQ R12, R8
	JA   LBB1_27

LBB1_17:
	LONG  $0x6f7e41c4; WORD $0x2424 // vmovdqu      (%r12), %ymm12
	LONG  $0x7215c1c4; WORD $0x04d4 // vpsrld       $4, %ymm12, %ymm13
	LONG  $0xecdb15c5               // vpand        %ymm4, %ymm13, %ymm13
	LONG  $0xf4db1dc5               // vpand        %ymm4, %ymm12, %ymm14
	LONG  $0x007542c4; BYTE $0xf6   // vpshufb      %ymm14, %ymm1, %ymm14
	LONG  $0x005542c4; BYTE $0xfd   // vpshufb      %ymm13, %ymm5, %ymm15
	LONG  $0xdb0541c4; BYTE $0xf6   // vpand        %ymm14, %ymm15, %ymm14
	LONG  $0xf6740dc5               // vpcmpeqb     %ymm6, %ymm14, %ymm14
	LONG  $0xd77dc1c4; BYTE $0xc6   // vpmovmskb    %ymm14, %eax
	ORQ   R13, AX
	BSFQ  AX, AX
	TESTB $32, AX
	JNE   LBB1_67
	CMPQ  R12, DI
	JAE   LBB1_48
	LONG  $0xe07e79c5               // vmovd        %xmm12, %eax
	LEAQ  1(R12), SI
	XORL  R9, R9
	XORL  DX, DX
	CMPB  AX, $10
	JE    LBB1_24

LBB1_21:
	CMPB    AX, $13
	JE      LBB1_24
	MOVBLZX AX, AX
	MOVBLZX 0(R10)(AX*1), AX
	CMPL    AX, $255
	JE      LBB1_40
	ADDL    $1, R9
	SHLL    $6, DX
	ORL     AX, DX

LBB1_24:
	CMPL    R9, $3
	JG      LBB1_41
	CMPQ    SI, DI
	JAE     LBB1_41
	MOVBLZX 0(SI), AX
	ADDQ    $1, SI
	CMPB    AX, $10
	JNE     LBB1_21
	JMP     LBB1_24

LBB1_67:
	LONG $0x007d42c4; BYTE $0xed   // vpshufb      %ymm13, %ymm0, %ymm13
	LONG $0xf2741dc5               // vpcmpeqb     %ymm2, %ymm12, %ymm14
	LONG $0x4c1563c4; WORD $0xe0eb // vpblendvb    %ymm14, %ymm3, %ymm13, %ymm13
	LONG $0xfc1541c4; BYTE $0xe4   // vpaddb       %ymm12, %ymm13, %ymm12
	QUAD $0xfffffd7325db1dc5       // vpand        $-653(%rip), %ymm12, %ymm12  /* LCPI1_10(%rip) */
	LONG $0x041d42c4; BYTE $0xe0   // vpmaddubsw   %ymm8, %ymm12, %ymm12
	LONG $0xf51d41c4; BYTE $0xe1   // vpmaddwd     %ymm9, %ymm12, %ymm12
	LONG $0x397d63c4; WORD $0x01e7 // vextracti128 $1, %ymm12, %xmm7
	LONG $0x0041c2c4; BYTE $0xfa   // vpshufb      %xmm10, %xmm7, %xmm7
	LONG $0x001d42c4; BYTE $0xe3   // vpshufb      %ymm11, %ymm12, %ymm12
	LONG $0x021de3c4; WORD $0x08ff // vpblendd     $8, %ymm7, %ymm12, %ymm7
	LONG $0x024563c4; WORD $0xc0e6 // vpblendd     $192, %ymm6, %ymm7, %ymm12
	CMPQ BX, R14
	JA   LBB1_69
	LONG $0x237f7ec5               // vmovdqu      %ymm12, (%rbx)
	JMP  LBB1_70

LBB1_48:
	XORL R9, R9
	MOVL $0, DX
	MOVQ R12, SI
	CMPQ R12, DI
	JE   LBB1_49

LBB1_51:
	CMPQ SI, R15
	JAE  LBB1_42
	CMPB 0(SI), $61
	JNE  LBB1_53
	LEAQ 2(SI), AX
	CMPB 1(SI), $61
	JNE  LBB1_47

LBB1_55:
	CMPQ AX, DI
	JAE  LBB1_56
	SUBQ R12, AX
	ADDQ $1, AX
	JMP  LBB1_64

LBB1_40:
	ADDQ $-1, SI

LBB1_41:
	CMPL R9, $1
	JNE  LBB1_43

LBB1_42:
	SUBQ  R12, SI
	ADDQ  $1, SI
	TESTQ SI, SI
	JE    LBB1_71
	JMP   LBB1_66

LBB1_43:
	CMPL R9, $3
	JG   LBB1_59
	CMPQ SI, DI
	JE   LBB1_49
	CMPL R9, $3
	JNE  LBB1_51
	LEAQ 1(SI), AX
	MOVL $3, R9
	CMPB 0(SI), $61
	JE   LBB1_55

LBB1_47:
	SUBQ R12, AX

LBB1_64:
	MOVQ  AX, SI
	TESTQ SI, SI
	JE    LBB1_71
	JMP   LBB1_66

LBB1_49:
	MOVQ  DI, SI
	TESTB $2, -44(BP)
	JNE   LBB1_57
	MOVQ  R11, SI
	SUBQ  R12, SI
	TESTQ SI, SI
	JE    LBB1_71
	JMP   LBB1_66

LBB1_59:
	MOVB DX, 2(BX)
	JMP  LBB1_60

LBB1_53:
	ADDQ  $1, SI
	SUBQ  R12, SI
	TESTQ SI, SI
	JE    LBB1_71
	JMP   LBB1_66

LBB1_56:
	MOVQ AX, SI

LBB1_57:
	MOVB    $4, AX
	SUBB    R9, AX
	MOVBLZX AX, AX
	ADDL    AX, AX
	LEAL    0(AX)(AX*2), CX
	SHLL    CX, DX
	CMPL    R9, $2
	JE      LBB1_61
	CMPL    R9, $3
	JNE     LBB1_62

LBB1_60:
	MOVB DH, 1(BX)

LBB1_61:
	SHRL $16, DX
	MOVB DX, 0(BX)

LBB1_62:
	MOVLQSX R9, AX
	ADDQ    AX, BX
	ADDQ    $-1, BX
	MOVQ    SI, R12
	JMP     LBB1_71

LBB1_27:
	LEAQ -8(DI), AX
	MOVQ AX, -136(BP)
	CMPQ R12, AX
	MOVQ DI, -72(BP)
	JA   LBB1_72
	MOVQ -88(BP), AX
	ADDQ $-8, AX
	MOVQ AX, -128(BP)
	CMPQ BX, AX
	JA   LBB1_72
	LEAQ -1(DI), AX
	MOVQ AX, -120(BP)
	LEAQ 1(DI), AX
	MOVQ AX, -104(BP)
	MOVQ R10, -64(BP)

LBB1_30:
	MOVQ    BX, -96(BP)
	MOVBLZX 0(R12), R13
	MOVBLZX 0(R10)(R13*1), DI
	MOVBLZX 1(R12), AX
	MOVBLZX 0(R10)(AX*1), SI
	MOVBLZX 2(R12), AX
	MOVBLZX 0(R10)(AX*1), R8
	MOVBLZX 3(R12), AX
	MOVBLZX 0(R10)(AX*1), DX
	MOVBLZX 4(R12), AX
	MOVBLZX 0(R10)(AX*1), R11
	MOVBLZX 5(R12), AX
	MOVBLZX 0(R10)(AX*1), AX
	MOVBLZX 6(R12), BX
	MOVBLZX 0(R10)(BX*1), R15
	MOVL    SI, BX
	ORL     DI, BX
	MOVL    DX, R9
	ORL     R8, R9
	ORL     BX, R9
	MOVL    AX, BX
	ORL     R11, BX
	MOVQ    R10, CX
	MOVL    R15, R10
	ORL     BX, R10
	MOVBLZX 7(R12), BX
	MOVBLZX 0(CX)(BX*1), R14
	ORL     R9, R10
	MOVL    R14, BX
	ORL     R10, BX
	CMPB    BX, $-1
	JE      LBB1_31
	SHLQ    $58, DI
	SHLQ    $52, SI
	ORQ     DI, SI
	SHLQ    $46, R8
	SHLQ    $40, DX
	ORQ     R8, DX
	ORQ     SI, DX
	SHLQ    $34, R11
	SHLQ    $28, AX
	ORQ     R11, AX
	SHLQ    $22, R15
	ORQ     AX, R15
	ORQ     DX, R15
	SHLQ    $16, R14
	ORQ     R15, R14
	BSWAPQ  R14
	MOVQ    -96(BP), BX
	MOVQ    R14, 0(BX)
	ADDQ    $8, R12
	ADDQ    $6, BX
	MOVQ    -64(BP), R10
	JMP     LBB1_114

LBB1_31:
	MOVQ -72(BP), BX
	CMPQ R12, BX
	MOVQ -96(BP), R8
	JAE  LBB1_95
	LEAQ 1(R12), SI
	XORL DI, DI
	XORL DX, DX
	MOVQ -64(BP), R10
	CMPB R13, $10
	JE   LBB1_37

LBB1_34:
	CMPB    R13, $13
	JE      LBB1_37
	MOVBLZX R13, AX
	MOVBLZX 0(R10)(AX*1), AX
	CMPL    AX, $255
	JE      LBB1_86
	ADDL    $1, DI
	SHLL    $6, DX
	ORL     AX, DX

LBB1_37:
	CMPL    DI, $3
	JG      LBB1_87
	CMPQ    SI, BX
	JAE     LBB1_87
	MOVBLZX 0(SI), R13
	ADDQ    $1, SI
	CMPB    R13, $10
	JNE     LBB1_34
	JMP     LBB1_37

LBB1_95:
	XORL DI, DI
	MOVL $0, DX
	MOVQ R12, SI
	CMPQ R12, BX
	JE   LBB1_96

LBB1_99:
	CMPQ SI, -120(BP)
	JAE  LBB1_100
	CMPB 0(SI), $61
	JNE  LBB1_103
	LEAQ 2(SI), AX
	CMPB 1(SI), $61
	MOVQ -64(BP), R10
	JNE  LBB1_93

LBB1_105:
	CMPQ  AX, BX
	JAE   LBB1_106
	SUBQ  R12, AX
	ADDQ  $1, AX
	MOVQ  AX, SI
	MOVQ  R8, BX
	TESTQ SI, SI
	JE    LBB1_114
	JMP   LBB1_66

LBB1_100:
	SUBQ  R12, SI
	ADDQ  $1, SI
	MOVQ  -64(BP), R10
	MOVQ  R8, BX
	TESTQ SI, SI
	JE    LBB1_114
	JMP   LBB1_66

LBB1_86:
	ADDQ $-1, SI

LBB1_87:
	CMPL  DI, $1
	JNE   LBB1_89
	SUBQ  R12, SI
	ADDQ  $1, SI
	MOVQ  R8, BX
	TESTQ SI, SI
	JE    LBB1_114
	JMP   LBB1_66

LBB1_89:
	CMPL DI, $3
	JG   LBB1_109
	CMPQ SI, BX
	JE   LBB1_96
	CMPL DI, $3
	JNE  LBB1_99
	LEAQ 1(SI), AX
	MOVL $3, DI
	CMPB 0(SI), $61
	JE   LBB1_105

LBB1_93:
	SUBQ  R12, AX
	MOVQ  AX, SI
	MOVQ  R8, BX
	TESTQ SI, SI
	JE    LBB1_114
	JMP   LBB1_66

LBB1_96:
	MOVQ  BX, SI
	TESTB $2, -44(BP)
	MOVQ  -64(BP), R10
	JNE   LBB1_107
	MOVQ  -104(BP), SI
	SUBQ  R12, SI
	MOVQ  R8, BX
	TESTQ SI, SI
	JE    LBB1_114
	JMP   LBB1_66

LBB1_109:
	MOVQ R8, BX
	MOVB DX, 2(R8)
	JMP  LBB1_110

LBB1_103:
	ADDQ  $1, SI
	SUBQ  R12, SI
	MOVQ  -64(BP), R10
	MOVQ  R8, BX
	TESTQ SI, SI
	JE    LBB1_114
	JMP   LBB1_66

LBB1_106:
	MOVQ AX, SI

LBB1_107:
	MOVB    $4, AX
	SUBB    DI, AX
	MOVBLZX AX, AX
	ADDL    AX, AX
	LEAL    0(AX)(AX*2), CX
	SHLL    CX, DX
	CMPL    DI, $2
	MOVQ    R8, BX
	JE      LBB1_111
	CMPL    DI, $3
	JNE     LBB1_112

LBB1_110:
	MOVB DH, 1(BX)

LBB1_111:
	SHRL $16, DX
	MOVB DX, 0(BX)

LBB1_112:
	MOVLQSX DI, AX
	ADDQ    AX, BX
	ADDQ    $-1, BX
	MOVQ    SI, R12

LBB1_114:
	CMPQ R12, -136(BP)
	JA   LBB1_72
	CMPQ BX, -128(BP)
	JBE  LBB1_30

LBB1_72:
	MOVQ BX, R8
	MOVQ -72(BP), BX
	LEAQ -4(BX), R9
	CMPQ R12, R9
	JA   LBB1_74
	MOVQ -88(BP), AX
	ADDQ $-4, AX
	MOVQ R8, DX
	CMPQ R8, AX
	JA   LBB1_74
	MOVQ AX, R13
	LEAQ -1(BX), R15
	ANDL $2, -44(BP)
	LEAQ 1(BX), R14
	MOVQ R8, BX

LBB1_117:
	MOVQ    BX, R11
	MOVBLZX 0(R12), AX
	MOVQ    R12, CX
	MOVBLZX 0(R10)(AX*1), R8
	MOVBLZX 1(R12), DX
	MOVBLZX 0(R10)(DX*1), DI
	MOVBLZX 2(R12), SI
	MOVBLZX 0(R10)(SI*1), R12
	MOVBLZX 3(CX), SI
	MOVBLZX 0(R10)(SI*1), SI
	MOVL    DI, DX
	ORL     R8, DX
	MOVL    R12, BX
	ORL     SI, BX
	ORL     DX, BX
	CMPB    BX, $-1
	JE      LBB1_118
	SHLL    $26, R8
	SHLL    $20, DI
	ORL     R8, DI
	SHLL    $14, R12
	SHLL    $8, SI
	ORL     R12, SI
	ORL     DI, SI
	BSWAPL  SI
	MOVQ    R11, BX
	MOVL    SI, 0(R11)
	ADDQ    $4, CX
	ADDQ    $3, BX
	MOVQ    CX, R12
	JMP     LBB1_154

LBB1_118:
	MOVQ -72(BP), BX
	CMPQ CX, BX
	MOVQ CX, R12
	JAE  LBB1_137
	LEAQ 1(R12), SI
	XORL DI, DI
	XORL DX, DX
	CMPB AX, $10
	JE   LBB1_124

LBB1_121:
	CMPB    AX, $13
	JE      LBB1_124
	MOVBLZX AX, AX
	MOVBLZX 0(R10)(AX*1), AX
	CMPL    AX, $255
	JE      LBB1_127
	ADDL    $1, DI
	SHLL    $6, DX
	ORL     AX, DX

LBB1_124:
	CMPL    DI, $3
	JG      LBB1_128
	CMPQ    SI, BX
	JAE     LBB1_128
	MOVBLZX 0(SI), AX
	ADDQ    $1, SI
	CMPB    AX, $10
	JNE     LBB1_121
	JMP     LBB1_124

LBB1_137:
	XORL DI, DI
	MOVL $0, DX
	MOVQ R12, SI
	CMPQ R12, BX
	JE   LBB1_138

LBB1_141:
	CMPQ SI, R15
	JAE  LBB1_129
	CMPB 0(SI), $61
	JNE  LBB1_143
	LEAQ 2(SI), AX
	CMPB 1(SI), $61
	JNE  LBB1_135

LBB1_145:
	CMPQ  AX, BX
	JAE   LBB1_146
	SUBQ  R12, AX
	ADDQ  $1, AX
	MOVQ  AX, SI
	MOVQ  R11, BX
	TESTQ SI, SI
	JE    LBB1_154
	JMP   LBB1_66

LBB1_127:
	ADDQ $-1, SI

LBB1_128:
	CMPL DI, $1
	JNE  LBB1_131

LBB1_129:
	SUBQ  R12, SI
	ADDQ  $1, SI
	MOVQ  R11, BX
	TESTQ SI, SI
	JE    LBB1_154
	JMP   LBB1_66

LBB1_131:
	CMPL DI, $3
	JG   LBB1_149
	CMPQ SI, BX
	JE   LBB1_138
	CMPL DI, $3
	JNE  LBB1_141
	LEAQ 1(SI), AX
	MOVL $3, DI
	CMPB 0(SI), $61
	JE   LBB1_145

LBB1_135:
	SUBQ  R12, AX
	MOVQ  AX, SI
	MOVQ  R11, BX
	TESTQ SI, SI
	JE    LBB1_154
	JMP   LBB1_66

LBB1_138:
	MOVQ  BX, SI
	CMPL  -44(BP), $0
	JNE   LBB1_147
	MOVQ  R14, SI
	SUBQ  R12, SI
	MOVQ  R11, BX
	TESTQ SI, SI
	JE    LBB1_154
	JMP   LBB1_66

LBB1_149:
	MOVQ R11, BX
	MOVB DX, 2(R11)
	JMP  LBB1_150

LBB1_143:
	ADDQ  $1, SI
	SUBQ  R12, SI
	MOVQ  R11, BX
	TESTQ SI, SI
	JE    LBB1_154
	JMP   LBB1_66

LBB1_146:
	MOVQ AX, SI

LBB1_147:
	MOVB    $4, AX
	SUBB    DI, AX
	MOVBLZX AX, AX
	ADDL    AX, AX
	LEAL    0(AX)(AX*2), CX
	SHLL    CX, DX
	CMPL    DI, $2
	MOVQ    R11, BX
	JE      LBB1_151
	CMPL    DI, $3
	JNE     LBB1_152

LBB1_150:
	MOVB DH, 1(BX)

LBB1_151:
	SHRL $16, DX
	MOVB DX, 0(BX)

LBB1_152:
	MOVLQSX DI, AX
	ADDQ    AX, BX
	ADDQ    $-1, BX
	MOVQ    SI, R12

LBB1_154:
	CMPQ R12, R9
	JA   LBB1_155
	CMPQ BX, R13
	JBE  LBB1_117

LBB1_155:
	MOVQ BX, R8
	MOVQ -72(BP), BX
	JMP  LBB1_75

LBB1_74:
	ANDL $2, -44(BP)
	LEAQ 1(BX), R14

LBB1_75:
	LEAQ -1(BX), R9
	JMP  LBB1_76

LBB1_85:
	SUBQ R12, SI
	ADDQ $1, SI

LBB1_177:
	TESTQ SI, SI
	JNE   LBB1_66

LBB1_76:
	CMPQ R12, BX
	JAE  LBB1_178
	XORL DI, DI
	MOVQ R12, SI
	XORL DX, DX

LBB1_78:
	MOVBLZX 0(SI), AX
	CMPQ    AX, $10
	JE      LBB1_82
	CMPB    AX, $13
	JE      LBB1_82
	MOVBLZX 0(R10)(AX*1), AX
	CMPL    AX, $255
	JE      LBB1_84
	ADDL    $1, DI
	SHLL    $6, DX
	ORL     AX, DX

LBB1_82:
	ADDQ $1, SI
	CMPL DI, $3
	JG   LBB1_84
	CMPQ SI, BX
	JB   LBB1_78

LBB1_84:
	CMPL DI, $1
	JE   LBB1_85
	CMPL DI, $3
	JG   LBB1_173
	CMPQ SI, BX
	JE   LBB1_159
	CMPL DI, $3
	JNE  LBB1_164
	LEAQ 1(SI), AX
	CMPB 0(SI), $61
	JNE  LBB1_163

LBB1_168:
	CMPQ AX, BX
	JAE  LBB1_169
	SUBQ R12, AX
	ADDQ $1, AX
	MOVQ AX, SI
	JMP  LBB1_177

LBB1_173:
	MOVQ R8, CX
	MOVB DX, 2(R8)

LBB1_174:
	MOVB DH, 1(CX)

LBB1_175:
	SHRL $16, DX
	MOVB DX, 0(CX)

LBB1_176:
	MOVLQSX DI, AX
	LEAQ    0(CX)(AX*1), R8
	ADDQ    $-1, R8
	MOVQ    SI, R12
	XORL    SI, SI
	JMP     LBB1_177

LBB1_159:
	MOVQ BX, SI
	CMPL -44(BP), $0
	JNE  LBB1_170
	MOVQ R14, SI
	SUBQ R12, SI
	JMP  LBB1_177

LBB1_164:
	CMPQ SI, R9
	JAE  LBB1_85
	CMPB 0(SI), $61
	JNE  LBB1_166
	LEAQ 2(SI), AX
	CMPB 1(SI), $61
	JE   LBB1_168

LBB1_163:
	SUBQ R12, AX
	MOVQ AX, SI
	JMP  LBB1_177

LBB1_169:
	MOVQ AX, SI

LBB1_170:
	MOVB    $4, AX
	SUBB    DI, AX
	MOVBLZX AX, AX
	ADDL    AX, AX
	LEAL    0(AX)(AX*2), CX
	SHLL    CX, DX
	CMPL    DI, $2
	JE      LBB1_171
	CMPL    DI, $3
	MOVQ    R8, CX
	JE      LBB1_174
	JMP     LBB1_176

LBB1_171:
	MOVQ R8, CX
	JMP  LBB1_175

LBB1_166:
	ADDQ $1, SI
	SUBQ R12, SI
	JMP  LBB1_177

LBB1_66:
	ADDQ R12, SI
	MOVQ -56(BP), AX
	SUBQ SI, AX
	JMP  LBB1_179

LBB1_178:
	MOVQ R8, CX
	SUBQ -80(BP), CX
	MOVQ -112(BP), AX
	ADDQ CX, 8(AX)
	MOVQ CX, AX

LBB1_179:
	ADDQ $96, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

_TabEncodeCharsetStd:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x2f2b393837363534 // .ascii 16, 'wxyz0123456789+/'

_VecEncodeCharsetStd:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'

_TabEncodeCharsetURL:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x5f2d393837363534 // .ascii 16, 'wxyz0123456789-_'

_VecEncodeCharsetURL:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'

_VecDecodeCharsetStd:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0x3fffffff3effffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff\xff?'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0xffffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff\xff'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

_VecDecodeCharsetURL:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffff3effffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0x3fffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff?'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

TEXT Â·__b64decode(SB), NOSPLIT | NOFRAME, $0 - 40
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -144(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_b64decode:
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ mode+24(FP), CX
	CALL Â·__native_entry__+1496(SB) // _b64decode
	MOVQ AX, ret+32(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__b64encode(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -40(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_b64encode:
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ mode+16(FP), DX
	LEAQ Â·__native_entry__+237(SB), AX // _b64encode
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry
